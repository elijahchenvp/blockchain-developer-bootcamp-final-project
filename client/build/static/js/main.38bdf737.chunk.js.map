{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","useState","message","setMessage","walletAddress","setWallet","status","setStatus","regStatus","setRegStatus","registrationStatus","setRegistrationStatus","rentStatus","setRentStatus","userRegistered","setUserRegistered","setUserRented","contract","setContract","setContent","userName","setUserName","license","setLicense","plateNo","setPlateNo","useEffect","whenWalletConnected","eth","getAccounts","net","getId","networkId","deployedNetwork","CarSharingContract","networks","instance","Contract","abi","address","events","UserRegistered","error","data","CarReserved","CarReleased","rentCar","methods","send","from","unrentCar","registerUser","registerDriver","getUserStatus","getRegistrationStatus","call","response","getRentStatus","connectWallet","request","method","addressArray","obj","target","href","connectWalletPressed","then","id","onClick","length","String","substring","style","paddingTop","type","placeholder","onChange","e","value","float","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38bdf737.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nconst App = () => {\n  \n  const [message, setMessage] = useState(\"\"); //default message\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [regStatus, setRegStatus] = useState(\"\");\n  const [registrationStatus, setRegistrationStatus] = useState(\"User Registered 🔴\");\n  const [rentStatus, setRentStatus] = useState(\"Car Reserved 🔴\");\n  const [userRegistered, setUserRegistered] = useState(\"0\");\n  const [userRented, setUserRented] = useState(\"0\");\n  const [contract, setContract] = useState(\"\");\n  const [content, setContent] = useState(\"test\");\n  const [userName, setUserName] = useState(\"\");\n  const [license, setLicense] = useState(\"\");\n  const [plateNo, setPlateNo] = useState(\"\");\n  //state = { message: null, userName: null, userId: null, rentStatus: null, web3: null, accounts: null, contract: null };\n\n  useEffect(async () => {\n    await whenWalletConnected();\n    // const message = \"hello\";\n    // setMessage(message);\n    \n  }, []);\n\n  const whenWalletConnected = async () => {\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        CarSharingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setContract(instance);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      //this.setState({ web3, accounts, contract: instance }, this.startApp);\n\n      instance.events.UserRegistered({}, (error, data) => {\n        if (error) {\n          setMessage(error.message);\n        } else{\n          setRegistrationStatus(\"User Registered 🟢\");\n          setUserRegistered(\"1\");\n        }\n      });\n\n      instance.events.CarReserved({}, (error, data) => {\n        if (error) {\n          setMessage(error.message);\n        } else{\n          setRentStatus(\"Car Reserved 🟢\");\n          setUserRented(\"1\");\n        }\n      });\n\n      instance.events.CarReleased({}, (error, data) => {\n        if (error) {\n          setMessage(error.message);\n        } else{\n          setRentStatus(\"Car Reserved 🔴\");\n        }\n      });\n  };\n\n  const componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = SimpleStorageContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   SimpleStorageContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        CarSharingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      //this.setState({ web3, accounts, contract: instance }, this.startApp);\n\n      instance.events.UserRegistered({}, (error, data) => {\n        if (error) {\n          alert(error.message);\n        } else{\n          this.setState({ registrationStatus: \"You are registered\"});\n        }\n        \n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  const runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n const rentCar = async () => {\n await contract.methods.rentCar(10, plateNo).send({ from: walletAddress });\n};\n\nconst unrentCar = async () => {\n  await contract.methods.unrentCar(plateNo).send({ from: walletAddress });\n };\n\nconst registerUser = async () => {\n  if(userRegistered == \"0\"){\n    await contract.methods.registerDriver(userName, license).send({ from: walletAddress });\n  }else{\n    setRegStatus(\"You are already registered!\");\n  }\n  \n};\n\nconst getUserStatus = async (address) => {\n  let response = await contract.methods.getRegistrationStatus(address).call();\n  if(response){\n    setRegistrationStatus(\"User Registered 🟢\");\n    setUserRegistered(\"1\");\n  }else{\n    setRegistrationStatus(\"User Registered 🔴\");\n    setContent('<div>' \n     + '<h3 style={{ paddingTop: \"18px\" }}>User Registration</h3>'\n     + ' <h3 style={{ paddingTop: \"18px\" }}>Name:</h3>'\n     + '   <input'\n     + '     type=\"text\"'\n     + '     placeholder=\"e.g. John Wick\"'\n     + '   />'\n     + '  <h3 style={{ paddingTop: \"18px\" }}>License:</h3>'\n     + '   <input'\n     + '     type=\"text\"'\n     + '     placeholder=\"e.g. ID12345\"'\n     + '   />'\n       \n     + ' </div> '\n     + ' <button id=\"publish\" style={{ float: \"right\"}}>'\n     + '     Register'\n     + '   </button>');\n  }\n\n  response = await contract.methods.getRentStatus(address).call();\n  if(response){\n    setRentStatus(\"Car Reserved 🟢\");\n  }else{\n    setRentStatus(\"Car Reserved 🔴\");\n  }\n};\n\n\n// getCurrentWalletConnected = async () => {\n//   if (window.ethereum) {\n//     try {\n//       const addressArray = await window.ethereum.request({\n//         method: \"eth_accounts\",\n//       });\n//       if (addressArray.length > 0) {\n//         return {\n//           address: addressArray[0],\n//           status: \"👆🏽 Write a message in the text-field above.\",\n//         };\n//       } else {\n//         return {\n//           address: \"\",\n//           status: \"🦊 Connect to Metamask using the top right button.\",\n//         };\n//       }\n//     } catch (err) {\n//       return {\n//         address: \"\",\n//         status: \"😥 \" + err.message,\n//       };\n//     }\n//   } else {\n//     return {\n//       address: \"\",\n//       status: (\n//         <span>\n//           <p>\n//             {\" \"}\n//             🦊{\" \"}\n//             <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n//               You must install Metamask, a virtual Ethereum wallet, in your\n//               browser.\n//             </a>\n//           </p>\n//         </span>\n//       ),\n//     };\n//   }\n// };\n\nconst connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Enter any Teslo car plate no. above to reserve!\",\n        regStatus: \"👆🏽 Register first to start car sharing!\",\n        address: addressArray[0],\n      };\n      setStatus(obj.status);\n      setRegStatus(obj.regStatus)\n      setWallet(obj.address);\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n  \n};  \n\n// const inputChanged = (e) => {\n//   this.setState({ inputVal: e.target.value });\n// }\n  \nconst connectWalletPressed = async () => {\n await connectWallet().then((response) => {\n  getUserStatus(response.address);\n}, (error) => {\n  /**\n   * Handle error here\n   */\n});;\n};\n\n    // if (!this.state.web3) {\n    //   return <div>Loading Web3, accounts, and contract...</div>;\n    // }\n    return (\n      <div id=\"container\">\n      {/* <img id=\"logo\" src={alchemylogo}></img> */}\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h1 style={{ paddingTop: \"50px\" }}>Teslo Car Sharing Service</h1>\n        <p id=\"registrationStatus\">{registrationStatus}</p>\n        <p id=\"rentStatus\">{rentStatus}</p>\n        <p>{message}</p>\n      <div> \n        <h3 style={{ paddingTop: \"18px\" }}>User Registration</h3>\n        <h4 style={{ paddingTop: \"18px\" }}>Name:</h4>\n     <input\n        type=\"text\"\n        placeholder=\"e.g. John Wick\"\n        onChange={(e) => setUserName(e.target.value)}\n        value={userName}\n     />\n     <h4 style={{ paddingTop: \"18px\" }}>License:</h4>\n      <input\n        type=\"text\"\n        placeholder=\"e.g. ID12345\"\n        onChange={(e) => setLicense(e.target.value)}\n        value={license}\n      />\n       <p id=\"status\">{regStatus}</p>\n     </div> \n     <button id=\"publish\" style={{ float: \"right\"}} onClick={registerUser}>\n        Register\n     </button>\n\n\n     <div> \n        <h3 style={{ paddingTop: \"18px\" }}>Car Reservation</h3>\n        <h4 style={{ paddingTop: \"18px\" }}>Plate No.:</h4>\n     <input\n        type=\"text\"\n        placeholder=\"e.g. SJW1011E\"\n        onChange={(e) => setPlateNo(e.target.value)}\n        value={plateNo}\n     />\n     </div> \n     <button id=\"publish\" style={{ float: \"right\"}} onClick={rentCar}>\n        Reserve\n     </button>\n     <button id=\"publish\" style={{ float: \"right\"}} onClick={unrentCar}>\n        Release\n     </button>\n       <p id=\"status\">{status}</p>\n       \n    </div>\n    );\n  };\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
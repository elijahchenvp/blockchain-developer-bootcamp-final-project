{"ast":null,"code":"import _slicedToArray from \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nconst App = () => {\n  //State variables\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        walletAddress = _useState2[0],\n        setWallet = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        status = _useState4[0],\n        setStatus = _useState4[1];\n\n  const _useState5 = useState(\"No connection to the network.\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        message = _useState6[0],\n        setMessage = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        newMessage = _useState8[0],\n        setNewMessage = _useState8[1]; //called only once\n\n\n  useEffect(async () => {\n    const registrationStatus = await contract.methods.getRegistrationStatus(accounts[0]).call();\n    setMessage(registrationStatus);\n    addSmartContractListener();\n\n    const _ref = await getCurrentWalletConnected(),\n          address = _ref.address,\n          status = _ref.status;\n\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n  }, []);\n\n  function addSmartContractListener() {\n    CarSharingContract.events.UserRegistered({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"🎉 Your message has been updated!\");\n      }\n    });\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \" \", \"\\uD83E\\uDD8A\", \" \", React.createElement(\"a\", {\n        target: \"_blank\",\n        href: \"https://metamask.io/download.html\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")));\n    }\n  } // class App extends Component {\n  //   state = { message: null, userName: null, userId: null, rentStatus: null, web3: null, accounts: null, contract: null };\n  //   componentDidMount = async () => {\n  //     try {\n  //       // Get network provider and web3 instance.\n  //       const web3 = await getWeb3();\n  //       // Use web3 to get the user's accounts.\n  //       const accounts = await web3.eth.getAccounts();\n  //       // Get the contract instance.\n  //       // const networkId = await web3.eth.net.getId();\n  //       // const deployedNetwork = SimpleStorageContract.networks[networkId];\n  //       // const instance = new web3.eth.Contract(\n  //       //   SimpleStorageContract.abi,\n  //       //   deployedNetwork && deployedNetwork.address,\n  //       // );\n  //       const networkId = await web3.eth.net.getId();\n  //       const deployedNetwork = CarSharingContract.networks[networkId];\n  //       const instance = new web3.eth.Contract(\n  //         CarSharingContract.abi,\n  //         deployedNetwork && deployedNetwork.address,\n  //       );\n  //       // Set web3, accounts, and contract to the state, and then proceed with an\n  //       // example of interacting with the contract's methods.\n  //       this.setState({ web3, accounts, contract: instance }, this.startApp);\n  //     } catch (error) {\n  //       // Catch any errors for any of the above operations.\n  //       alert(\n  //         `Failed to load web3, accounts, or contract. Check console for details.`,\n  //       );\n  //       console.error(error);\n  //     }\n  //   };\n\n\n  getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\"\n        });\n\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\"\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\"\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, \" \", \"\\uD83E\\uDD8A\", \" \", React.createElement(\"a\", {\n          target: \"_blank\",\n          href: \"https://metamask.io/download.html\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")))\n      };\n    }\n  };\n\n  connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  runExample = async () => {\n    const _this$state = this.state,\n          accounts = _this$state.accounts,\n          contract = _this$state.contract; // Stores a given value, 5 by default.\n\n    await contract.methods.set(5).send({\n      from: accounts[0]\n    }); // Get the value from the contract to prove it worked.\n\n    const response = await contract.methods.get().call(); // Update state with the result.\n\n    this.setState({\n      storageValue: response\n    });\n  };\n\n  startApp = async () => {\n    const _this$state2 = this.state,\n          accounts = _this$state2.accounts,\n          contract = _this$state2.contract; // Stores a given value\n    //await contract.methods.rentCar(10).send({ from: accounts[0] });\n\n    let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n\n    if (response == true) {\n      this.setState({\n        registrationStatus: \"You are registered\"\n      });\n    } // Get the value from the contract to prove it worked.\n    //  const response = await contract.methods.getRentStatus(accounts[1]).call();\n    //   if(response == true){\n    //     this.setState({ rentStatus: \"A car has been assigned to you\" });\n    //   }else{\n    //     this.setState({ rentStatus: \"No car is assigned to you\" });\n    //   }\n    //  const response2 = await contract.methods.getRegistrationStatus(accounts[1]).call();\n    //   if(response2 == true){\n    //     this.setState({ registrationStatus: \"You are registered\" });\n    //   }else{\n    //     this.setState({ registrationStatus: \"You are not registered\" });\n    //   }\n\n  };\n\n  rentCar = async () => {\n    const _this$state3 = this.state,\n          accounts = _this$state3.accounts,\n          contract = _this$state3.contract; // Stores a given value\n    // Get the value from the contract to prove it worked.\n\n    const response = await contract.methods.rentCar(10).call();\n\n    if (response == 1) {\n      this.setState({\n        rentStatus: \"A car has been assigned to you\"\n      });\n    } else {\n      this.setState({\n        rentStatus: \"No car is assigned to you\"\n      });\n    }\n  };\n\n  registerUser = async () => {\n    const _this$state4 = this.state,\n          accounts = _this$state4.accounts,\n          contract = _this$state4.contract; // Get the value from the contract to prove it worked.\n\n    await contract.methods.registerDriver(this.state.userName, this.state.userId).send({\n      from: accounts[0]\n    }); //truffleAssert.eventEmitted(result, 'New)\n\n    let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n\n    if (response == true) {\n      this.setState({\n        registrationStatus: \"You are registered\"\n      });\n    }\n  };\n\n  inputChanged = e => {\n    this.setState({\n      inputVal: e.target.value\n    });\n  };\n\n  return React.createElement(\"div\", {\n    id: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    id: \"logo\",\n    src: alchemylogo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    id: \"walletButton\",\n    onClick: connectWalletPressed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, \"Connect Wallet\")), React.createElement(\"h2\", {\n    style: {\n      paddingTop: \"50px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, \"Current Message:\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, message), React.createElement(\"h2\", {\n    style: {\n      paddingTop: \"18px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, \"New Message:\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Update the message in your smart contract.\",\n    onChange: e => setNewMessage(e.target.value),\n    value: newMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    id: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, status), React.createElement(\"button\", {\n    id: \"publish\",\n    onClick: onUpdatePressed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, \"Update\"))); // render() {\n  //   if (!this.state.web3) {\n  //     return <div>Loading Web3, accounts, and contract...</div>;\n  //   }\n  //   return (\n  //     <div className=\"App\">\n  //       <h1>Welcome to SG Car Sharing Service!</h1>\n  //       <label>{this.state.message}</label>\n  //       <label>Name: </label>\n  //       <input onChange={event => this.setState({ userName: event.target.value })}/>\n  //       <label>ID: </label>\n  //       <input onChange={event => this.setState({ userId: event.target.value })}/>\n  //       <button onClick={this.registerUser}>Register</button>\n  //         <div>Registration Status: {this.state.registrationStatus}</div>\n  //         <div>Rent Status: {this.state.rentStatus}</div>\n  //         <button onClick={this.rentCar}>Rent Car</button>\n  //     </div>\n  //   );\n  // }\n  //}\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js"],"names":["React","Component","useEffect","useState","CarSharingContract","getWeb3","App","walletAddress","setWallet","status","setStatus","message","setMessage","newMessage","setNewMessage","registrationStatus","contract","methods","getRegistrationStatus","accounts","call","addSmartContractListener","getCurrentWalletConnected","address","addWalletListener","events","UserRegistered","error","data","returnValues","window","ethereum","on","length","addressArray","request","method","err","connectWalletPressed","walletResponse","connectWallet","runExample","state","set","send","from","response","get","setState","storageValue","startApp","rentCar","rentStatus","registerUser","registerDriver","userName","userId","inputChanged","e","inputVal","target","value","alchemylogo","String","substring","paddingTop","onUpdatePressed"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nconst App = () => {\n\n//State variables\nconst [walletAddress, setWallet] = useState(\"\");\nconst [status, setStatus] = useState(\"\");\nconst [message, setMessage] = useState(\"No connection to the network.\");\nconst [newMessage, setNewMessage] = useState(\"\");\n\n//called only once\nuseEffect(async () => {\n  const registrationStatus = await contract.methods.getRegistrationStatus(accounts[0]).call();\n  setMessage(registrationStatus);\n  addSmartContractListener();\n  const {address, status} = await getCurrentWalletConnected();\n  setWallet(address)\n  setStatus(status); \n  addWalletListener(); \n}, []);\nfunction addSmartContractListener() {\n  CarSharingContract.events.UserRegistered({}, (error, data) => {\n    if (error) {\n      setStatus(\"😥 \" + error.message);\n    } else {\n      setMessage(data.returnValues[1]);\n      setNewMessage(\"\");\n      setStatus(\"🎉 Your message has been updated!\");\n    }\n  });\n}\nfunction addWalletListener() {\n  if (window.ethereum) {\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0]);\n        setStatus(\"👆🏽 Write a message in the text-field above.\");\n      } else {\n        setWallet(\"\");\n        setStatus(\"🦊 Connect to Metamask using the top right button.\");\n      }\n    });\n  } else {\n    setStatus(\n      <p>\n        {\" \"}\n        🦊{\" \"}\n        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n          You must install Metamask, a virtual Ethereum wallet, in your\n          browser.\n        </a>\n      </p>\n    );\n  }\n}\n\n \n// class App extends Component {\n  \n//   state = { message: null, userName: null, userId: null, rentStatus: null, web3: null, accounts: null, contract: null };\n//   componentDidMount = async () => {\n//     try {\n//       // Get network provider and web3 instance.\n//       const web3 = await getWeb3();\n\n//       // Use web3 to get the user's accounts.\n//       const accounts = await web3.eth.getAccounts();\n\n//       // Get the contract instance.\n//       // const networkId = await web3.eth.net.getId();\n//       // const deployedNetwork = SimpleStorageContract.networks[networkId];\n//       // const instance = new web3.eth.Contract(\n//       //   SimpleStorageContract.abi,\n//       //   deployedNetwork && deployedNetwork.address,\n//       // );\n\n//       const networkId = await web3.eth.net.getId();\n//       const deployedNetwork = CarSharingContract.networks[networkId];\n//       const instance = new web3.eth.Contract(\n//         CarSharingContract.abi,\n//         deployedNetwork && deployedNetwork.address,\n//       );\n\n//       // Set web3, accounts, and contract to the state, and then proceed with an\n//       // example of interacting with the contract's methods.\n//       this.setState({ web3, accounts, contract: instance }, this.startApp);\n//     } catch (error) {\n//       // Catch any errors for any of the above operations.\n//       alert(\n//         `Failed to load web3, accounts, or contract. Check console for details.`,\n//       );\n//       console.error(error);\n//     }\n//   };\n  \n  getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n  connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  startApp = async () => {\n    const { accounts, contract } = this.state;\n    // Stores a given value\n   //await contract.methods.rentCar(10).send({ from: accounts[0] });\n   let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n   if(response == true){\n     this.setState({ registrationStatus: \"You are registered\"});\n   }\n   // Get the value from the contract to prove it worked.\n  //  const response = await contract.methods.getRentStatus(accounts[1]).call();\n  //   if(response == true){\n  //     this.setState({ rentStatus: \"A car has been assigned to you\" });\n  //   }else{\n  //     this.setState({ rentStatus: \"No car is assigned to you\" });\n  //   }\n\n  //  const response2 = await contract.methods.getRegistrationStatus(accounts[1]).call();\n\n  //   if(response2 == true){\n  //     this.setState({ registrationStatus: \"You are registered\" });\n  //   }else{\n  //     this.setState({ registrationStatus: \"You are not registered\" });\n  //   }\n    \n };\n\n rentCar = async () => {\n  const { accounts, contract } = this.state;\n  // Stores a given value\n \n\n // Get the value from the contract to prove it worked.\n const response = await contract.methods.rentCar(10).call();\n  if(response == 1){\n    this.setState({ rentStatus: \"A car has been assigned to you\" });\n  }else{\n    this.setState({ rentStatus: \"No car is assigned to you\" });\n  }\n     \n};\n\nregisterUser = async () => {\n  const { accounts, contract } = this.state;\n \n // Get the value from the contract to prove it worked.\n\n  await contract.methods.registerDriver(this.state.userName, this.state.userId).send({ from: accounts[0] });\n\n  //truffleAssert.eventEmitted(result, 'New)\n  let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n  if(response == true){\n    this.setState({ registrationStatus: \"You are registered\"});\n  }\n  \n};\n\n inputChanged = (e) => {\n  this.setState({ inputVal: e.target.value });\n}\nreturn (\n  <div id=\"container\">\n    <img id=\"logo\" src={alchemylogo}></img>\n    <button id=\"walletButton\" onClick={connectWalletPressed}>\n      {walletAddress.length > 0 ? (\n        \"Connected: \" +\n        String(walletAddress).substring(0, 6) +\n        \"...\" +\n        String(walletAddress).substring(38)\n      ) : (\n        <span>Connect Wallet</span>\n      )}\n    </button>\n\n    <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\n    <p>{message}</p>\n\n    <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\n\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Update the message in your smart contract.\"\n        onChange={(e) => setNewMessage(e.target.value)}\n        value={newMessage}\n      />\n      <p id=\"status\">{status}</p>\n\n      <button id=\"publish\" onClick={onUpdatePressed}>\n        Update\n      </button>\n    </div>\n  </div>\n);\n  // render() {\n  //   if (!this.state.web3) {\n  //     return <div>Loading Web3, accounts, and contract...</div>;\n  //   }\n  //   return (\n  //     <div className=\"App\">\n  //       <h1>Welcome to SG Car Sharing Service!</h1>\n  //       <label>{this.state.message}</label>\n  //       <label>Name: </label>\n  //       <input onChange={event => this.setState({ userName: event.target.value })}/>\n  //       <label>ID: </label>\n  //       <input onChange={event => this.setState({ userId: event.target.value })}/>\n  //       <button onClick={this.registerUser}>Register</button>\n  //         <div>Registration Status: {this.state.registrationStatus}</div>\n  //         <div>Rent Status: {this.state.rentStatus}</div>\n  //         <button onClick={this.rentCar}>Rent Car</button>\n\n\n\n        \n  //     </div>\n  //   );\n  // }\n//}\n      }\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
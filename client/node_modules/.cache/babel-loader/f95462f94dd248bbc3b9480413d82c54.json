{"ast":null,"code":"import _slicedToArray from \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nconst App = () => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        message = _useState2[0],\n        setMessage = _useState2[1]; //default message\n\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        walletAddress = _useState4[0],\n        setWallet = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        status = _useState6[0],\n        setStatus = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        registrationStatus = _useState8[0],\n        setRegistrationStatus = _useState8[1];\n\n  const _useState9 = useState(\"\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        contract = _useState10[0],\n        setContract = _useState10[1];\n\n  const _useState11 = useState(\"test\"),\n        _useState12 = _slicedToArray(_useState11, 2),\n        content = _useState12[0],\n        setContent = _useState12[1]; //state = { message: null, userName: null, userId: null, rentStatus: null, web3: null, accounts: null, contract: null };\n\n\n  useEffect(async () => {\n    await whenWalletConnected(); // const message = \"hello\";\n    // setMessage(message);\n  }, []);\n\n  const whenWalletConnected = async () => {\n    const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n    const accounts = await web3.eth.getAccounts();\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = CarSharingContract.networks[networkId];\n    const instance = new web3.eth.Contract(CarSharingContract.abi, deployedNetwork && deployedNetwork.address);\n    setContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n    // example of interacting with the contract's methods.\n    //this.setState({ web3, accounts, contract: instance }, this.startApp);\n\n    instance.events.UserRegistered({}, (error, data) => {\n      if (error) {\n        alert(error.message);\n      } else {\n        this.setState({\n          registrationStatus: \"You are registered\"\n        });\n      }\n    });\n  };\n\n  const componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = SimpleStorageContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   SimpleStorageContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(CarSharingContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      //this.setState({ web3, accounts, contract: instance }, this.startApp);\n\n      instance.events.UserRegistered({}, (error, data) => {\n        if (error) {\n          alert(error.message);\n        } else {\n          this.setState({\n            registrationStatus: \"You are registered\"\n          });\n        }\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n      console.error(error);\n    }\n  };\n\n  const runExample = async () => {\n    const _this$state = this.state,\n          accounts = _this$state.accounts,\n          contract = _this$state.contract; // Stores a given value, 5 by default.\n\n    await contract.methods.set(5).send({\n      from: accounts[0]\n    }); // Get the value from the contract to prove it worked.\n\n    const response = await contract.methods.get().call(); // Update state with the result.\n\n    this.setState({\n      storageValue: response\n    });\n  };\n\n  const testWrite = async () => {\n    const _this$state2 = this.state,\n          accounts = _this$state2.accounts,\n          contract = _this$state2.contract; // Stores a given value, 5 by default.\n\n    await contract.methods.writeMessage(\"test\").send({\n      from: accounts[0]\n    });\n  };\n\n  const startApp = async () => {\n    const _this$state3 = this.state,\n          accounts = _this$state3.accounts,\n          contract = _this$state3.contract; // Stores a given value\n    //await contract.methods.rentCar(10).send({ from: accounts[0] });\n\n    let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n\n    if (response == true) {\n      this.setState({\n        registrationStatus: \"You are registered\"\n      });\n    } // Get the value from the contract to prove it worked.\n    //  const response = await contract.methods.getRentStatus(accounts[1]).call();\n    //   if(response == true){\n    //     this.setState({ rentStatus: \"A car has been assigned to you\" });\n    //   }else{\n    //     this.setState({ rentStatus: \"No car is assigned to you\" });\n    //   }\n    //  const response2 = await contract.methods.getRegistrationStatus(accounts[1]).call();\n    //   if(response2 == true){\n    //     this.setState({ registrationStatus: \"You are registered\" });\n    //   }else{\n    //     this.setState({ registrationStatus: \"You are not registered\" });\n    //   }\n\n  };\n\n  const rentCar = async () => {\n    const _this$state4 = this.state,\n          accounts = _this$state4.accounts,\n          contract = _this$state4.contract; // Stores a given value\n    // Get the value from the contract to prove it worked.\n\n    const response = await contract.methods.rentCar(10).call();\n\n    if (response == 1) {\n      this.setState({\n        rentStatus: \"A car has been assigned to you\"\n      });\n    } else {\n      this.setState({\n        rentStatus: \"No car is assigned to you\"\n      });\n    }\n  };\n\n  const registerUser = async () => {\n    const _this$state5 = this.state,\n          accounts = _this$state5.accounts,\n          contract = _this$state5.contract;\n    await contract.methods.registerDriver(this.state.userName, this.state.userId).send({\n      from: accounts[0]\n    });\n    await contract.methods.getRegistrationStatus(accounts[0]).call();\n  };\n\n  const getUserStatus = async () => {\n    let response = await contract.methods.getRegistrationStatus(\"0xe96236821f858dc06715365065e41be5039e1668\").call();\n\n    if (response) {\n      setRegistrationStatus(\"You are registered!\");\n    } else {\n      setContent('<div>' + '<h3 style={{ paddingTop: \"18px\" }}>User Registration</h3>' + ' <h3 style={{ paddingTop: \"18px\" }}>Name:</h3>' + '   <input' + '     type=\"text\"' + '     placeholder=\"e.g. John Wick\"' + '   />' + '  <h3 style={{ paddingTop: \"18px\" }}>License:</h3>' + '   <input' + '     type=\"text\"' + '     placeholder=\"e.g. ID12345\"' + '   />' + ' </div> ' + ' <button id=\"publish\" style={{ float: \"right\"}}>' + '     Register' + '   </button>');\n    }\n  }; // getCurrentWalletConnected = async () => {\n  //   if (window.ethereum) {\n  //     try {\n  //       const addressArray = await window.ethereum.request({\n  //         method: \"eth_accounts\",\n  //       });\n  //       if (addressArray.length > 0) {\n  //         return {\n  //           address: addressArray[0],\n  //           status: \"👆🏽 Write a message in the text-field above.\",\n  //         };\n  //       } else {\n  //         return {\n  //           address: \"\",\n  //           status: \"🦊 Connect to Metamask using the top right button.\",\n  //         };\n  //       }\n  //     } catch (err) {\n  //       return {\n  //         address: \"\",\n  //         status: \"😥 \" + err.message,\n  //       };\n  //     }\n  //   } else {\n  //     return {\n  //       address: \"\",\n  //       status: (\n  //         <span>\n  //           <p>\n  //             {\" \"}\n  //             🦊{\" \"}\n  //             <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n  //               You must install Metamask, a virtual Ethereum wallet, in your\n  //               browser.\n  //             </a>\n  //           </p>\n  //         </span>\n  //       ),\n  //     };\n  //   }\n  // };\n\n\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const obj = {\n          status: \"👆🏽 Write a message in the text-field above.\",\n          address: addressArray[0]\n        };\n        setStatus(obj.status);\n        setWallet(obj.address);\n        await getUserStatus();\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258\n          },\n          __self: this\n        }, \" \", \"\\uD83E\\uDD8A\", \" \", React.createElement(\"a\", {\n          target: \"_blank\",\n          href: \"https://metamask.io/download.html\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261\n          },\n          __self: this\n        }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")))\n      };\n    }\n  }; // const inputChanged = (e) => {\n  //   this.setState({ inputVal: e.target.value });\n  // }\n\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n  }; // if (!this.state.web3) {\n  //   return <div>Loading Web3, accounts, and contract...</div>;\n  // }\n\n\n  return React.createElement(\"div\", {\n    id: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    id: \"walletButton\",\n    onClick: connectWalletPressed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, \"Connect Wallet\")), React.createElement(\"h1\", {\n    style: {\n      paddingTop: \"50px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, \"Teslo Car Sharing Service\"), React.createElement(\"p\", {\n    id: \"registrationStatus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, registrationStatus), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, message), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    style: {\n      paddingTop: \"18px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }, \"User Registration\"), React.createElement(\"h3\", {\n    style: {\n      paddingTop: \"18px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    },\n    __self: this\n  }, \"Name:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"e.g. John Wick\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    style: {\n      paddingTop: \"18px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  }, \"License:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"e.g. ID12345\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    id: \"publish\",\n    style: {\n      float: \"right\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }, \"Register\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    style: {\n      paddingTop: \"18px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321\n    },\n    __self: this\n  }, \"Car Reservation\"), React.createElement(\"h3\", {\n    style: {\n      paddingTop: \"18px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322\n    },\n    __self: this\n  }, \"Plate No.:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"e.g. SJW1011E\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    id: \"publish\",\n    style: {\n      float: \"right\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328\n    },\n    __self: this\n  }, \"Reserve\"), React.createElement(\"p\", {\n    id: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345\n    },\n    __self: this\n  }, status));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js"],"names":["React","Component","useEffect","useState","SimpleStorageContract","CarSharingContract","getWeb3","App","message","setMessage","walletAddress","setWallet","status","setStatus","registrationStatus","setRegistrationStatus","contract","setContract","content","setContent","whenWalletConnected","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","events","UserRegistered","error","data","alert","setState","componentDidMount","console","runExample","state","methods","set","send","from","response","get","call","storageValue","testWrite","writeMessage","startApp","getRegistrationStatus","rentCar","rentStatus","registerUser","registerDriver","userName","userId","getUserStatus","connectWallet","window","ethereum","addressArray","request","method","obj","err","connectWalletPressed","walletResponse","length","String","substring","paddingTop","float"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nconst App = () => {\n  \n  const [message, setMessage] = useState(\"\"); //default message\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [registrationStatus, setRegistrationStatus] = useState(\"\");\n  const [contract, setContract] = useState(\"\");\n  const [content, setContent] = useState(\"test\");\n  //state = { message: null, userName: null, userId: null, rentStatus: null, web3: null, accounts: null, contract: null };\n\n  useEffect(async () => {\n    await whenWalletConnected();\n    // const message = \"hello\";\n    // setMessage(message);\n    \n  }, []);\n\n  const whenWalletConnected = async () => {\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        CarSharingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setContract(instance);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      //this.setState({ web3, accounts, contract: instance }, this.startApp);\n\n      instance.events.UserRegistered({}, (error, data) => {\n        if (error) {\n          alert(error.message);\n        } else{\n          this.setState({ registrationStatus: \"You are registered\"});\n        }\n        \n      });\n  };\n\n  const componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = SimpleStorageContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   SimpleStorageContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        CarSharingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      //this.setState({ web3, accounts, contract: instance }, this.startApp);\n\n      instance.events.UserRegistered({}, (error, data) => {\n        if (error) {\n          alert(error.message);\n        } else{\n          this.setState({ registrationStatus: \"You are registered\"});\n        }\n        \n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  const runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  const testWrite = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.writeMessage(\"test\").send({from: accounts[0]});\n\n  \n  };\n\n  const startApp = async () => {\n    const { accounts, contract } = this.state;\n    // Stores a given value\n   //await contract.methods.rentCar(10).send({ from: accounts[0] });\n   let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n   if(response == true){\n     this.setState({ registrationStatus: \"You are registered\"});\n   }\n   // Get the value from the contract to prove it worked.\n  //  const response = await contract.methods.getRentStatus(accounts[1]).call();\n  //   if(response == true){\n  //     this.setState({ rentStatus: \"A car has been assigned to you\" });\n  //   }else{\n  //     this.setState({ rentStatus: \"No car is assigned to you\" });\n  //   }\n\n  //  const response2 = await contract.methods.getRegistrationStatus(accounts[1]).call();\n\n  //   if(response2 == true){\n  //     this.setState({ registrationStatus: \"You are registered\" });\n  //   }else{\n  //     this.setState({ registrationStatus: \"You are not registered\" });\n  //   }\n    \n };\n\n const rentCar = async () => {\n  const { accounts, contract } = this.state;\n  // Stores a given value\n \n\n // Get the value from the contract to prove it worked.\n const response = await contract.methods.rentCar(10).call();\n  if(response == 1){\n    this.setState({ rentStatus: \"A car has been assigned to you\" });\n  }else{\n    this.setState({ rentStatus: \"No car is assigned to you\" });\n  }\n     \n};\n\nconst registerUser = async () => {\n  const { accounts, contract } = this.state;\n \n  await contract.methods.registerDriver(this.state.userName, this.state.userId).send({ from: accounts[0] });\n  await contract.methods.getRegistrationStatus(accounts[0]).call();\n};\n\nconst getUserStatus = async () => {\n  let response = await contract.methods.getRegistrationStatus(\"0xe96236821f858dc06715365065e41be5039e1668\").call();\n  if(response){\n    setRegistrationStatus(\"You are registered!\");\n  }else{\n    setContent('<div>' \n     + '<h3 style={{ paddingTop: \"18px\" }}>User Registration</h3>'\n     + ' <h3 style={{ paddingTop: \"18px\" }}>Name:</h3>'\n     + '   <input'\n     + '     type=\"text\"'\n     + '     placeholder=\"e.g. John Wick\"'\n     + '   />'\n     + '  <h3 style={{ paddingTop: \"18px\" }}>License:</h3>'\n     + '   <input'\n     + '     type=\"text\"'\n     + '     placeholder=\"e.g. ID12345\"'\n     + '   />'\n       \n     + ' </div> '\n     + ' <button id=\"publish\" style={{ float: \"right\"}}>'\n     + '     Register'\n     + '   </button>');\n  }\n};\n\n\n// getCurrentWalletConnected = async () => {\n//   if (window.ethereum) {\n//     try {\n//       const addressArray = await window.ethereum.request({\n//         method: \"eth_accounts\",\n//       });\n//       if (addressArray.length > 0) {\n//         return {\n//           address: addressArray[0],\n//           status: \"👆🏽 Write a message in the text-field above.\",\n//         };\n//       } else {\n//         return {\n//           address: \"\",\n//           status: \"🦊 Connect to Metamask using the top right button.\",\n//         };\n//       }\n//     } catch (err) {\n//       return {\n//         address: \"\",\n//         status: \"😥 \" + err.message,\n//       };\n//     }\n//   } else {\n//     return {\n//       address: \"\",\n//       status: (\n//         <span>\n//           <p>\n//             {\" \"}\n//             🦊{\" \"}\n//             <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n//               You must install Metamask, a virtual Ethereum wallet, in your\n//               browser.\n//             </a>\n//           </p>\n//         </span>\n//       ),\n//     };\n//   }\n// };\n\nconst connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      setStatus(obj.status);\n      setWallet(obj.address);\n      await getUserStatus();\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};  \n\n// const inputChanged = (e) => {\n//   this.setState({ inputVal: e.target.value });\n// }\n  \nconst connectWalletPressed = async () => {\n  const walletResponse = await connectWallet();\n  \n};\n\n    // if (!this.state.web3) {\n    //   return <div>Loading Web3, accounts, and contract...</div>;\n    // }\n    return (\n      <div id=\"container\">\n      {/* <img id=\"logo\" src={alchemylogo}></img> */}\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h1 style={{ paddingTop: \"50px\" }}>Teslo Car Sharing Service</h1>\n        <p id=\"registrationStatus\">{registrationStatus}</p>\n        <p>{message}</p>\n      <div> \n        <h3 style={{ paddingTop: \"18px\" }}>User Registration</h3>\n        <h3 style={{ paddingTop: \"18px\" }}>Name:</h3>\n     <input\n        type=\"text\"\n        placeholder=\"e.g. John Wick\"\n     />\n     <h3 style={{ paddingTop: \"18px\" }}>License:</h3>\n      <input\n        type=\"text\"\n        placeholder=\"e.g. ID12345\"\n      />\n       \n     </div> \n     <button id=\"publish\" style={{ float: \"right\"}}>\n        Register\n     </button>\n\n\n     <div> \n        <h3 style={{ paddingTop: \"18px\" }}>Car Reservation</h3>\n        <h3 style={{ paddingTop: \"18px\" }}>Plate No.:</h3>\n     <input\n        type=\"text\"\n        placeholder=\"e.g. SJW1011E\"\n     />\n     </div> \n     <button id=\"publish\" style={{ float: \"right\"}}>\n        Reserve\n     </button>\n{/* \n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Update the message in your smart contract.\"\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n       \n\n        <button id=\"publish\" onClick={onUpdatePressed}>\n          Update\n        </button>\n      </div> */}\n       <p id=\"status\">{status}</p>\n       \n       \n    </div>\n    );\n  };\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\"; //State variables\n\nconst _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      walletAddress = _useState2[0],\n      setWallet = _useState2[1];\n\nconst _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      setStatus = _useState4[1];\n\nconst _useState5 = useState(\"No connection to the network.\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      message = _useState6[0],\n      setMessage = _useState6[1];\n\nconst _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      newMessage = _useState8[0],\n      setNewMessage = _useState8[1]; //called only once\n\n\nuseEffect(async () => {\n  const message = await loadCurrentMessage();\n  setMessage(message);\n  addSmartContractListener();\n\n  const _ref = await getCurrentWalletConnected(),\n        address = _ref.address,\n        status = _ref.status;\n\n  setWallet(address);\n  setStatus(status);\n  addWalletListener();\n}, []);\n\nfunction addSmartContractListener() {\n  helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n    if (error) {\n      setStatus(\"😥 \" + error.message);\n    } else {\n      setMessage(data.returnValues[1]);\n      setNewMessage(\"\");\n      setStatus(\"🎉 Your message has been updated!\");\n    }\n  });\n}\n\nfunction addWalletListener() {\n  if (window.ethereum) {\n    window.ethereum.on(\"accountsChanged\", accounts => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0]);\n        setStatus(\"👆🏽 Write a message in the text-field above.\");\n      } else {\n        setWallet(\"\");\n        setStatus(\"🦊 Connect to Metamask using the top right button.\");\n      }\n    });\n  } else {\n    setStatus(React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \" \", \"\\uD83E\\uDD8A\", \" \", React.createElement(\"a\", {\n      target: \"_blank\",\n      href: \"https://metamask.io/download.html\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")));\n  }\n}\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      message: null,\n      userName: null,\n      userId: null,\n      rentStatus: null,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n        // const networkId = await web3.eth.net.getId();\n        // const deployedNetwork = SimpleStorageContract.networks[networkId];\n        // const instance = new web3.eth.Contract(\n        //   SimpleStorageContract.abi,\n        //   deployedNetwork && deployedNetwork.address,\n        // );\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = CarSharingContract.networks[networkId];\n        const instance = new web3.eth.Contract(CarSharingContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.startApp);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.testWrite = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            contract = _this$state2.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.writeMessage(\"test\").send({\n        from: accounts[0]\n      });\n    };\n\n    this.startApp = async () => {\n      const _this$state3 = this.state,\n            accounts = _this$state3.accounts,\n            contract = _this$state3.contract; // Stores a given value\n      //await contract.methods.rentCar(10).send({ from: accounts[0] });\n\n      let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n\n      if (response == true) {\n        this.setState({\n          registrationStatus: \"You are registered\"\n        });\n      } // Get the value from the contract to prove it worked.\n      //  const response = await contract.methods.getRentStatus(accounts[1]).call();\n      //   if(response == true){\n      //     this.setState({ rentStatus: \"A car has been assigned to you\" });\n      //   }else{\n      //     this.setState({ rentStatus: \"No car is assigned to you\" });\n      //   }\n      //  const response2 = await contract.methods.getRegistrationStatus(accounts[1]).call();\n      //   if(response2 == true){\n      //     this.setState({ registrationStatus: \"You are registered\" });\n      //   }else{\n      //     this.setState({ registrationStatus: \"You are not registered\" });\n      //   }\n\n    };\n\n    this.rentCar = async () => {\n      const _this$state4 = this.state,\n            accounts = _this$state4.accounts,\n            contract = _this$state4.contract; // Stores a given value\n      // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.rentCar(10).call();\n\n      if (response == 1) {\n        this.setState({\n          rentStatus: \"A car has been assigned to you\"\n        });\n      } else {\n        this.setState({\n          rentStatus: \"No car is assigned to you\"\n        });\n      }\n    };\n\n    this.registerUser = async () => {\n      const _this$state5 = this.state,\n            accounts = _this$state5.accounts,\n            contract = _this$state5.contract; // Stores a given value\n      // Get the value from the contract to prove it worked.\n\n      try {\n        await contract.methods.registerDriver(this.state.userName, this.state.userId).send({\n          from: accounts[0]\n        }); //truffleAssert.eventEmitted(result, 'New)\n\n        let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n\n        if (response == true) {\n          this.setState({\n            registrationStatus: \"You are registered\"\n          });\n        }\n      } catch (err) {\n        //let message = JSON.parse(err.message.substring(56).trim().replace(\"'\", \"\")).value.data.data;\n        //console.log(message[Object.keys(message)[0]].reason);\n        this.setState({\n          message: \"test\"\n        });\n      }\n    };\n\n    this.setStorage = async () => {\n      // Stores a given value\n      await this.state.contract.methods.set(3).send({\n        from: this.state.accounts\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await this.state.contract.methods.get().call(); // Update state with the result.\n\n      return this.setState({\n        storageValue: response\n      });\n    };\n\n    this.inputChanged = e => {\n      this.setState({\n        inputVal: e.target.value\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Welcome to SG Car Sharing Service!\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, this.state.message), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Name: \"), React.createElement(\"input\", {\n      onChange: event => this.setState({\n        userName: event.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"ID: \"), React.createElement(\"input\", {\n      onChange: event => this.setState({\n        userId: event.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.registerUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Register\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"Registration Status: \", this.state.registrationStatus), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"Rent Status: \", this.state.rentStatus), React.createElement(\"button\", {\n      onClick: this.rentCar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Rent Car\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js"],"names":["React","Component","useEffect","useState","SimpleStorageContract","CarSharingContract","getWeb3","walletAddress","setWallet","status","setStatus","message","setMessage","newMessage","setNewMessage","loadCurrentMessage","addSmartContractListener","getCurrentWalletConnected","address","addWalletListener","helloWorldContract","events","UpdatedMessages","error","data","returnValues","window","ethereum","on","accounts","length","App","state","userName","userId","rentStatus","web3","contract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","setState","startApp","alert","console","runExample","methods","set","send","from","response","get","call","storageValue","testWrite","writeMessage","getRegistrationStatus","registrationStatus","rentCar","registerUser","registerDriver","err","setStorage","inputChanged","e","inputVal","target","value","render","event"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\n//State variables\nconst [walletAddress, setWallet] = useState(\"\");\nconst [status, setStatus] = useState(\"\");\nconst [message, setMessage] = useState(\"No connection to the network.\");\nconst [newMessage, setNewMessage] = useState(\"\");\n\n//called only once\nuseEffect(async () => {\n  const message = await loadCurrentMessage();\n  setMessage(message);\n  addSmartContractListener();\n  const {address, status} = await getCurrentWalletConnected();\n  setWallet(address)\n  setStatus(status); \n  addWalletListener(); \n}, []);\nfunction addSmartContractListener() {\n  helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n    if (error) {\n      setStatus(\"😥 \" + error.message);\n    } else {\n      setMessage(data.returnValues[1]);\n      setNewMessage(\"\");\n      setStatus(\"🎉 Your message has been updated!\");\n    }\n  });\n}\nfunction addWalletListener() {\n  if (window.ethereum) {\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      if (accounts.length > 0) {\n        setWallet(accounts[0]);\n        setStatus(\"👆🏽 Write a message in the text-field above.\");\n      } else {\n        setWallet(\"\");\n        setStatus(\"🦊 Connect to Metamask using the top right button.\");\n      }\n    });\n  } else {\n    setStatus(\n      <p>\n        {\" \"}\n        🦊{\" \"}\n        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n          You must install Metamask, a virtual Ethereum wallet, in your\n          browser.\n        </a>\n      </p>\n    );\n  }\n}\nclass App extends Component {\n  \n  state = { message: null, userName: null, userId: null, rentStatus: null, web3: null, accounts: null, contract: null };\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = SimpleStorageContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   SimpleStorageContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        CarSharingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.startApp);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n  \n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  testWrite = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.writeMessage(\"test\").send({from: accounts[0]});\n\n  \n  };\n\n  startApp = async () => {\n    const { accounts, contract } = this.state;\n    // Stores a given value\n   //await contract.methods.rentCar(10).send({ from: accounts[0] });\n   let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n   if(response == true){\n     this.setState({ registrationStatus: \"You are registered\"});\n   }\n   // Get the value from the contract to prove it worked.\n  //  const response = await contract.methods.getRentStatus(accounts[1]).call();\n  //   if(response == true){\n  //     this.setState({ rentStatus: \"A car has been assigned to you\" });\n  //   }else{\n  //     this.setState({ rentStatus: \"No car is assigned to you\" });\n  //   }\n\n  //  const response2 = await contract.methods.getRegistrationStatus(accounts[1]).call();\n\n  //   if(response2 == true){\n  //     this.setState({ registrationStatus: \"You are registered\" });\n  //   }else{\n  //     this.setState({ registrationStatus: \"You are not registered\" });\n  //   }\n    \n };\n\n rentCar = async () => {\n  const { accounts, contract } = this.state;\n  // Stores a given value\n \n\n // Get the value from the contract to prove it worked.\n const response = await contract.methods.rentCar(10).call();\n  if(response == 1){\n    this.setState({ rentStatus: \"A car has been assigned to you\" });\n  }else{\n    this.setState({ rentStatus: \"No car is assigned to you\" });\n  }\n     \n};\n\nregisterUser = async () => {\n  const { accounts, contract } = this.state;\n  // Stores a given value\n \n\n // Get the value from the contract to prove it worked.\n try{\n  await contract.methods.registerDriver(this.state.userName, this.state.userId).send({ from: accounts[0] });\n\n  //truffleAssert.eventEmitted(result, 'New)\n  let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n  if(response == true){\n    this.setState({ registrationStatus: \"You are registered\"});\n  }\n }catch(err){\n  //let message = JSON.parse(err.message.substring(56).trim().replace(\"'\", \"\")).value.data.data;\n  //console.log(message[Object.keys(message)[0]].reason);\n   this.setState({ message: \"test\"});\n }\n  \n};\n\n  setStorage = async () => {\n\n    // Stores a given value\n   await this.state.contract.methods.set(3).send({ from: this.state.accounts });\n\n   // Get the value from the contract to prove it worked.\n   const response = await this.state.contract.methods.get().call();\n\n   // Update state with the result.\n   return this.setState({ storageValue: response });\n };\n\n inputChanged = (e) => {\n  this.setState({ inputVal: e.target.value });\n}\n  \n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Welcome to SG Car Sharing Service!</h1>\n        <label>{this.state.message}</label>\n        <label>Name: </label>\n        <input onChange={event => this.setState({ userName: event.target.value })}/>\n        <label>ID: </label>\n        <input onChange={event => this.setState({ userId: event.target.value })}/>\n        <button onClick={this.registerUser}>Register</button>\n          <div>Registration Status: {this.state.registrationStatus}</div>\n          <div>Rent Status: {this.state.rentStatus}</div>\n          <button onClick={this.rentCar}>Rent Car</button>\n\n\n\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
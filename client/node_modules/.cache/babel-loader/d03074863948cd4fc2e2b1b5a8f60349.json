{"ast":null,"code":"var _jsxFileName = \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nconst HelloWorld = () => {\n  state = {\n    message: null,\n    userName: null,\n    userId: null,\n    rentStatus: null,\n    web3: null,\n    accounts: null,\n    contract: null\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = SimpleStorageContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   SimpleStorageContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(CarSharingContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n\n      this.setState({\n        web3,\n        accounts,\n        contract: instance\n      }, this.startApp);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const _this$state = this.state,\n          accounts = _this$state.accounts,\n          contract = _this$state.contract; // Stores a given value, 5 by default.\n\n    await contract.methods.set(5).send({\n      from: accounts[0]\n    }); // Get the value from the contract to prove it worked.\n\n    const response = await contract.methods.get().call(); // Update state with the result.\n\n    this.setState({\n      storageValue: response\n    });\n  };\n\n  testWrite = async () => {\n    const _this$state2 = this.state,\n          accounts = _this$state2.accounts,\n          contract = _this$state2.contract; // Stores a given value, 5 by default.\n\n    await contract.methods.writeMessage(\"test\").send({\n      from: accounts[0]\n    });\n  };\n\n  startApp = async () => {\n    const _this$state3 = this.state,\n          accounts = _this$state3.accounts,\n          contract = _this$state3.contract; // Stores a given value\n    //await contract.methods.rentCar(10).send({ from: accounts[0] });\n\n    let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n\n    if (response == true) {\n      this.setState({\n        registrationStatus: \"You are registered\"\n      });\n    } // Get the value from the contract to prove it worked.\n    //  const response = await contract.methods.getRentStatus(accounts[1]).call();\n    //   if(response == true){\n    //     this.setState({ rentStatus: \"A car has been assigned to you\" });\n    //   }else{\n    //     this.setState({ rentStatus: \"No car is assigned to you\" });\n    //   }\n    //  const response2 = await contract.methods.getRegistrationStatus(accounts[1]).call();\n    //   if(response2 == true){\n    //     this.setState({ registrationStatus: \"You are registered\" });\n    //   }else{\n    //     this.setState({ registrationStatus: \"You are not registered\" });\n    //   }\n\n  };\n\n  rentCar = async () => {\n    const _this$state4 = this.state,\n          accounts = _this$state4.accounts,\n          contract = _this$state4.contract; // Stores a given value\n    // Get the value from the contract to prove it worked.\n\n    const response = await contract.methods.rentCar(10).call();\n\n    if (response == 1) {\n      this.setState({\n        rentStatus: \"A car has been assigned to you\"\n      });\n    } else {\n      this.setState({\n        rentStatus: \"No car is assigned to you\"\n      });\n    }\n  };\n\n  registerUser = async () => {\n    const _this$state5 = this.state,\n          accounts = _this$state5.accounts,\n          contract = _this$state5.contract; // Stores a given value\n    // Get the value from the contract to prove it worked.\n\n    try {\n      await contract.methods.registerDriver(this.state.userName, this.state.userId).send({\n        from: accounts[0]\n      }); //truffleAssert.eventEmitted(result, 'New)\n\n      let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n\n      if (response == true) {\n        this.setState({\n          registrationStatus: \"You are registered\"\n        });\n      }\n    } catch (err) {\n      //let message = JSON.parse(err.message.substring(56).trim().replace(\"'\", \"\")).value.data.data;\n      //console.log(message[Object.keys(message)[0]].reason);\n      this.setState({\n        message: \"test\"\n      });\n    }\n  };\n\n  setStorage = async () => {\n    // Stores a given value\n    await this.state.contract.methods.set(3).send({\n      from: this.state.accounts\n    }); // Get the value from the contract to prove it worked.\n\n    const response = await this.state.contract.methods.get().call(); // Update state with the result.\n\n    return this.setState({\n      storageValue: response\n    });\n  };\n\n  inputChanged = e => {\n    this.setState({\n      inputVal: e.target.value\n    });\n  };\n\n  if (!this.state.web3) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Loading Web3, accounts, and contract...\");\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"Welcome to SG Car Sharing Service!\"), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, this.state.message), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Name: \"), React.createElement(\"input\", {\n    onChange: event => this.setState({\n      userName: event.target.value\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"ID: \"), React.createElement(\"input\", {\n    onChange: event => this.setState({\n      userId: event.target.value\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: this.registerUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Register\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"Registration Status: \", this.state.registrationStatus), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Rent Status: \", this.state.rentStatus), React.createElement(\"button\", {\n    onClick: this.rentCar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"Rent Car\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js"],"names":["React","Component","useEffect","useState","SimpleStorageContract","CarSharingContract","getWeb3","HelloWorld","state","message","userName","userId","rentStatus","web3","accounts","contract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","startApp","error","alert","console","runExample","methods","set","send","from","response","get","call","storageValue","testWrite","writeMessage","getRegistrationStatus","registrationStatus","rentCar","registerUser","registerDriver","err","setStorage","inputChanged","e","inputVal","target","value","event","App"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\nconst HelloWorld = () => {\n  state = { message: null, userName: null, userId: null, rentStatus: null, web3: null, accounts: null, contract: null };\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = SimpleStorageContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   SimpleStorageContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        CarSharingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.startApp);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  testWrite = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.writeMessage(\"test\").send({from: accounts[0]});\n\n  \n  };\n\n  startApp = async () => {\n    const { accounts, contract } = this.state;\n    // Stores a given value\n   //await contract.methods.rentCar(10).send({ from: accounts[0] });\n   let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n   if(response == true){\n     this.setState({ registrationStatus: \"You are registered\"});\n   }\n   // Get the value from the contract to prove it worked.\n  //  const response = await contract.methods.getRentStatus(accounts[1]).call();\n  //   if(response == true){\n  //     this.setState({ rentStatus: \"A car has been assigned to you\" });\n  //   }else{\n  //     this.setState({ rentStatus: \"No car is assigned to you\" });\n  //   }\n\n  //  const response2 = await contract.methods.getRegistrationStatus(accounts[1]).call();\n\n  //   if(response2 == true){\n  //     this.setState({ registrationStatus: \"You are registered\" });\n  //   }else{\n  //     this.setState({ registrationStatus: \"You are not registered\" });\n  //   }\n    \n };\n\n rentCar = async () => {\n  const { accounts, contract } = this.state;\n  // Stores a given value\n \n\n // Get the value from the contract to prove it worked.\n const response = await contract.methods.rentCar(10).call();\n  if(response == 1){\n    this.setState({ rentStatus: \"A car has been assigned to you\" });\n  }else{\n    this.setState({ rentStatus: \"No car is assigned to you\" });\n  }\n     \n};\n\nregisterUser = async () => {\n  const { accounts, contract } = this.state;\n  // Stores a given value\n \n\n // Get the value from the contract to prove it worked.\n try{\n  await contract.methods.registerDriver(this.state.userName, this.state.userId).send({ from: accounts[0] });\n\n  //truffleAssert.eventEmitted(result, 'New)\n  let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n  if(response == true){\n    this.setState({ registrationStatus: \"You are registered\"});\n  }\n }catch(err){\n  //let message = JSON.parse(err.message.substring(56).trim().replace(\"'\", \"\")).value.data.data;\n  //console.log(message[Object.keys(message)[0]].reason);\n   this.setState({ message: \"test\"});\n }\n  \n};\n\n  setStorage = async () => {\n\n    // Stores a given value\n   await this.state.contract.methods.set(3).send({ from: this.state.accounts });\n\n   // Get the value from the contract to prove it worked.\n   const response = await this.state.contract.methods.get().call();\n\n   // Update state with the result.\n   return this.setState({ storageValue: response });\n };\n\n inputChanged = (e) => {\n  this.setState({ inputVal: e.target.value });\n}\n  \n \n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Welcome to SG Car Sharing Service!</h1>\n        <label>{this.state.message}</label>\n        <label>Name: </label>\n        <input onChange={event => this.setState({ userName: event.target.value })}/>\n        <label>ID: </label>\n        <input onChange={event => this.setState({ userId: event.target.value })}/>\n        <button onClick={this.registerUser}>Register</button>\n          <div>Registration Status: {this.state.registrationStatus}</div>\n          <div>Rent Status: {this.state.rentStatus}</div>\n          <button onClick={this.rentCar}>Rent Car</button>\n      </div>\n    );\n  };\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
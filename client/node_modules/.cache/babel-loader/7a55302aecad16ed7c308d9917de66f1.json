{"ast":null,"code":"import _slicedToArray from \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nconst App = () => {\n  const _useState = useState(\"No connection to the network.\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        message = _useState2[0],\n        setMessage = _useState2[1]; //default message\n  //state = { message: null, userName: null, userId: null, rentStatus: null, web3: null, accounts: null, contract: null };\n\n\n  useEffect(async () => {\n    const message = await loadCurrentMessage();\n    setMessage(message);\n    addSmartContractListener();\n\n    const _ref = await getCurrentWalletConnected(),\n          address = _ref.address,\n          status = _ref.status;\n\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n  }, []);\n\n  const componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = SimpleStorageContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   SimpleStorageContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(CarSharingContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      //this.setState({ web3, accounts, contract: instance }, this.startApp);\n\n      instance.events.UserRegistered({}, (error, data) => {\n        if (error) {\n          alert(error.message);\n        } else {\n          this.setState({\n            registrationStatus: \"You are registered\"\n          });\n        }\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n      console.error(error);\n    }\n  };\n\n  const runExample = async () => {\n    const _this$state = this.state,\n          accounts = _this$state.accounts,\n          contract = _this$state.contract; // Stores a given value, 5 by default.\n\n    await contract.methods.set(5).send({\n      from: accounts[0]\n    }); // Get the value from the contract to prove it worked.\n\n    const response = await contract.methods.get().call(); // Update state with the result.\n\n    this.setState({\n      storageValue: response\n    });\n  };\n\n  const testWrite = async () => {\n    const _this$state2 = this.state,\n          accounts = _this$state2.accounts,\n          contract = _this$state2.contract; // Stores a given value, 5 by default.\n\n    await contract.methods.writeMessage(\"test\").send({\n      from: accounts[0]\n    });\n  };\n\n  const startApp = async () => {\n    const _this$state3 = this.state,\n          accounts = _this$state3.accounts,\n          contract = _this$state3.contract; // Stores a given value\n    //await contract.methods.rentCar(10).send({ from: accounts[0] });\n\n    let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n\n    if (response == true) {\n      this.setState({\n        registrationStatus: \"You are registered\"\n      });\n    } // Get the value from the contract to prove it worked.\n    //  const response = await contract.methods.getRentStatus(accounts[1]).call();\n    //   if(response == true){\n    //     this.setState({ rentStatus: \"A car has been assigned to you\" });\n    //   }else{\n    //     this.setState({ rentStatus: \"No car is assigned to you\" });\n    //   }\n    //  const response2 = await contract.methods.getRegistrationStatus(accounts[1]).call();\n    //   if(response2 == true){\n    //     this.setState({ registrationStatus: \"You are registered\" });\n    //   }else{\n    //     this.setState({ registrationStatus: \"You are not registered\" });\n    //   }\n\n  };\n\n  const rentCar = async () => {\n    const _this$state4 = this.state,\n          accounts = _this$state4.accounts,\n          contract = _this$state4.contract; // Stores a given value\n    // Get the value from the contract to prove it worked.\n\n    const response = await contract.methods.rentCar(10).call();\n\n    if (response == 1) {\n      this.setState({\n        rentStatus: \"A car has been assigned to you\"\n      });\n    } else {\n      this.setState({\n        rentStatus: \"No car is assigned to you\"\n      });\n    }\n  };\n\n  const registerUser = async () => {\n    const _this$state5 = this.state,\n          accounts = _this$state5.accounts,\n          contract = _this$state5.contract;\n    await contract.methods.registerDriver(this.state.userName, this.state.userId).send({\n      from: accounts[0]\n    });\n    await contract.methods.getRegistrationStatus(accounts[0]).call();\n  }; // getCurrentWalletConnected = async () => {\n  //   if (window.ethereum) {\n  //     try {\n  //       const addressArray = await window.ethereum.request({\n  //         method: \"eth_accounts\",\n  //       });\n  //       if (addressArray.length > 0) {\n  //         return {\n  //           address: addressArray[0],\n  //           status: \"👆🏽 Write a message in the text-field above.\",\n  //         };\n  //       } else {\n  //         return {\n  //           address: \"\",\n  //           status: \"🦊 Connect to Metamask using the top right button.\",\n  //         };\n  //       }\n  //     } catch (err) {\n  //       return {\n  //         address: \"\",\n  //         status: \"😥 \" + err.message,\n  //       };\n  //     }\n  //   } else {\n  //     return {\n  //       address: \"\",\n  //       status: (\n  //         <span>\n  //           <p>\n  //             {\" \"}\n  //             🦊{\" \"}\n  //             <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n  //               You must install Metamask, a virtual Ethereum wallet, in your\n  //               browser.\n  //             </a>\n  //           </p>\n  //         </span>\n  //       ),\n  //     };\n  //   }\n  // };\n\n\n  const inputChanged = e => {\n    this.setState({\n      inputVal: e.target.value\n    });\n  };\n\n  if (!this.state.web3) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Loading Web3, accounts, and contract...\");\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"Welcome to SG Car Sharing Service!\"), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, this.state.message), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, \"Name: \"), React.createElement(\"input\", {\n    onChange: event => this.setState({\n      userName: event.target.value\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, \"ID: \"), React.createElement(\"input\", {\n    onChange: event => this.setState({\n      userId: event.target.value\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: this.registerUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, \"Register\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, \"Registration Status: \", this.state.registrationStatus), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, \"Rent Status: \", this.state.rentStatus), React.createElement(\"button\", {\n    onClick: this.rentCar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, \"Rent Car\"), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, message));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js"],"names":["React","Component","useEffect","useState","SimpleStorageContract","CarSharingContract","getWeb3","App","message","setMessage","loadCurrentMessage","addSmartContractListener","getCurrentWalletConnected","address","status","setWallet","setStatus","addWalletListener","componentDidMount","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","events","UserRegistered","error","data","alert","setState","registrationStatus","console","runExample","state","contract","methods","set","send","from","response","get","call","storageValue","testWrite","writeMessage","startApp","getRegistrationStatus","rentCar","rentStatus","registerUser","registerDriver","userName","userId","inputChanged","e","inputVal","target","value","event"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  \n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  //state = { message: null, userName: null, userId: null, rentStatus: null, web3: null, accounts: null, contract: null };\n\n  useEffect(async () => {\n    const message = await loadCurrentMessage();\n    setMessage(message);\n    addSmartContractListener();\n\n    const { address, status } = await getCurrentWalletConnected();\n\n    setWallet(address);\n    setStatus(status);\n\n    addWalletListener();\n  }, []);\n\n  const componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = SimpleStorageContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   SimpleStorageContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        CarSharingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      //this.setState({ web3, accounts, contract: instance }, this.startApp);\n\n      instance.events.UserRegistered({}, (error, data) => {\n        if (error) {\n          alert(error.message);\n        } else{\n          this.setState({ registrationStatus: \"You are registered\"});\n        }\n        \n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  const runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  const testWrite = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.writeMessage(\"test\").send({from: accounts[0]});\n\n  \n  };\n\n  const startApp = async () => {\n    const { accounts, contract } = this.state;\n    // Stores a given value\n   //await contract.methods.rentCar(10).send({ from: accounts[0] });\n   let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n   if(response == true){\n     this.setState({ registrationStatus: \"You are registered\"});\n   }\n   // Get the value from the contract to prove it worked.\n  //  const response = await contract.methods.getRentStatus(accounts[1]).call();\n  //   if(response == true){\n  //     this.setState({ rentStatus: \"A car has been assigned to you\" });\n  //   }else{\n  //     this.setState({ rentStatus: \"No car is assigned to you\" });\n  //   }\n\n  //  const response2 = await contract.methods.getRegistrationStatus(accounts[1]).call();\n\n  //   if(response2 == true){\n  //     this.setState({ registrationStatus: \"You are registered\" });\n  //   }else{\n  //     this.setState({ registrationStatus: \"You are not registered\" });\n  //   }\n    \n };\n\n const rentCar = async () => {\n  const { accounts, contract } = this.state;\n  // Stores a given value\n \n\n // Get the value from the contract to prove it worked.\n const response = await contract.methods.rentCar(10).call();\n  if(response == 1){\n    this.setState({ rentStatus: \"A car has been assigned to you\" });\n  }else{\n    this.setState({ rentStatus: \"No car is assigned to you\" });\n  }\n     \n};\n\nconst registerUser = async () => {\n  const { accounts, contract } = this.state;\n \n  await contract.methods.registerDriver(this.state.userName, this.state.userId).send({ from: accounts[0] });\n  await contract.methods.getRegistrationStatus(accounts[0]).call();\n};\n\n\n// getCurrentWalletConnected = async () => {\n//   if (window.ethereum) {\n//     try {\n//       const addressArray = await window.ethereum.request({\n//         method: \"eth_accounts\",\n//       });\n//       if (addressArray.length > 0) {\n//         return {\n//           address: addressArray[0],\n//           status: \"👆🏽 Write a message in the text-field above.\",\n//         };\n//       } else {\n//         return {\n//           address: \"\",\n//           status: \"🦊 Connect to Metamask using the top right button.\",\n//         };\n//       }\n//     } catch (err) {\n//       return {\n//         address: \"\",\n//         status: \"😥 \" + err.message,\n//       };\n//     }\n//   } else {\n//     return {\n//       address: \"\",\n//       status: (\n//         <span>\n//           <p>\n//             {\" \"}\n//             🦊{\" \"}\n//             <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n//               You must install Metamask, a virtual Ethereum wallet, in your\n//               browser.\n//             </a>\n//           </p>\n//         </span>\n//       ),\n//     };\n//   }\n// };\n\nconst inputChanged = (e) => {\n  this.setState({ inputVal: e.target.value });\n}\n  \n  \n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Welcome to SG Car Sharing Service!</h1>\n        <label>{this.state.message}</label>\n        <label>Name: </label>\n        <input onChange={event => this.setState({ userName: event.target.value })}/>\n        <label>ID: </label>\n        <input onChange={event => this.setState({ userId: event.target.value })}/>\n        <button onClick={this.registerUser}>Register</button>\n        <div>Registration Status: {this.state.registrationStatus}</div>\n        <div>Rent Status: {this.state.rentStatus}</div>\n        <button onClick={this.rentCar}>Rent Car</button>\n        <label>{message}</label>\n      </div>\n    );\n  };\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
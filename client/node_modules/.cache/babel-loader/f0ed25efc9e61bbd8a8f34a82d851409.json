{"ast":null,"code":"import _slicedToArray from \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nconst HelloWorld = () => {\n  //state variables\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        walletAddress = _useState2[0],\n        setWallet = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        status = _useState4[0],\n        setStatus = _useState4[1];\n\n  const _useState5 = useState(\"No connection to the network.\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        message = _useState6[0],\n        setMessage = _useState6[1]; //default message\n\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        newMessage = _useState8[0],\n        setNewMessage = _useState8[1]; //called only once\n\n\n  useEffect(async () => {\n    // const message = await getRegistrationStatus();\n    // setMessage(message);\n    addSmartContractListener();\n\n    const _ref = await getCurrentWalletConnected(),\n          address = _ref.address,\n          status = _ref.status;\n\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n  }, []);\n\n  function addSmartContractListener() {\n    CarSharingContract.events.UserRegistered({}, (error, data) => {\n      if (error) {\n        setStatus(\"üò• \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"üéâ Your message has been updated!\");\n      }\n    });\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"üëÜüèΩ Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"ü¶ä Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \" \", \"\\uD83E\\uDD8A\", \" \", React.createElement(\"a\", {\n        target: \"_blank\",\n        href: \"https://metamask.io/download.html\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")));\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onUpdatePressed = async () => {\n    const _ref2 = await updateMessage(walletAddress, newMessage),\n          status = _ref2.status;\n\n    setStatus(status);\n  }; //the UI of our component\n\n\n  return React.createElement(\"div\", {\n    id: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    id: \"walletButton\",\n    onClick: connectWalletPressed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Connect Wallet\")), React.createElement(\"h2\", {\n    style: {\n      paddingTop: \"50px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Current Message:\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, message), React.createElement(\"h2\", {\n    style: {\n      paddingTop: \"18px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"New Message:\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Update the message in your smart contract.\",\n    onChange: e => setNewMessage(e.target.value),\n    value: newMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    id: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, status), React.createElement(\"button\", {\n    id: \"publish\",\n    onClick: onUpdatePressed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Update\")));\n}; // interactions\n\n\nexport const loadRegistrationStatus = async () => {\n  const status = await CarSharingContract.methods.getRegistrationStatus(walletAddress).call();\n  return status;\n};\nexport const registerUser = async () => {\n  await CarSharingContract.methods.registerDriver(this.state.userName, this.state.userId).send({\n    from: walletAddress\n  });\n  let response = await CarSharingContract.methods.getRegistrationStatus(walletAddress).call();\n\n  if (response == true) {\n    this.setState({\n      registrationStatus: \"You are registered\"\n    });\n  }\n};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"üëÜüèΩ Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \" \", \"\\uD83E\\uDD8A\", \" \", React.createElement(\"a\", {\n        target: \"_blank\",\n        href: \"https://metamask.io/download.html\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")))\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"üëÜüèΩ Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"ü¶ä Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \" \", \"\\uD83E\\uDD8A\", \" \", React.createElement(\"a\", {\n        target: \"_blank\",\n        href: \"https://metamask.io/download.html\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")))\n    };\n  }\n}; // ------------------------------\n\nexport default HelloWorld;","map":{"version":3,"sources":["/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js"],"names":["React","Component","useEffect","useState","SimpleStorageContract","CarSharingContract","getWeb3","HelloWorld","walletAddress","setWallet","status","setStatus","message","setMessage","newMessage","setNewMessage","addSmartContractListener","getCurrentWalletConnected","address","addWalletListener","events","UserRegistered","error","data","returnValues","window","ethereum","on","accounts","length","connectWalletPressed","walletResponse","connectWallet","onUpdatePressed","updateMessage","String","substring","paddingTop","e","target","value","loadRegistrationStatus","methods","getRegistrationStatus","call","registerUser","registerDriver","state","userName","userId","send","from","response","setState","registrationStatus","addressArray","request","method","obj","err"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\n\n\nconst HelloWorld = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(async () => {\n    // const message = await getRegistrationStatus();\n    // setMessage(message);\n    addSmartContractListener();\n\n    const { address, status } = await getCurrentWalletConnected();\n\n    setWallet(address);\n    setStatus(status);\n\n    addWalletListener();\n  }, []);\n\n  function addSmartContractListener() {\n    CarSharingContract.events.UserRegistered({}, (error, data) => {\n      if (error) {\n        setStatus(\"üò• \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"üéâ Your message has been updated!\");\n      }\n    });\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"üëÜüèΩ Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"ü¶ä Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          ü¶ä{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onUpdatePressed = async () => {\n    const { status } = await updateMessage(walletAddress, newMessage);\n    setStatus(status);\n  };\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n      \n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\n      <p>{message}</p>\n\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Update the message in your smart contract.\"\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n        <p id=\"status\">{status}</p>\n\n        <button id=\"publish\" onClick={onUpdatePressed}>\n          Update\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// interactions\n\nexport const loadRegistrationStatus = async () => {\n  const status = await CarSharingContract.methods.getRegistrationStatus(walletAddress).call();\n  return status;\n};\n\n\nexport const registerUser = async () => {\n  await CarSharingContract.methods.registerDriver(this.state.userName, this.state.userId).send({ from: walletAddress });\n\n  let response = await CarSharingContract.methods.getRegistrationStatus(walletAddress).call();\n  if(response == true){\n    this.setState({ registrationStatus: \"You are registered\"});\n  }\n  \n};\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"üëÜüèΩ Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            ü¶ä{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"üëÜüèΩ Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"ü¶ä Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"üò• \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            ü¶ä{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\n// ------------------------------\n\nexport default HelloWorld;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nconst HelloWorld = () => {\n  //state variables\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        walletAddress = _useState2[0],\n        setWallet = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        status = _useState4[0],\n        setStatus = _useState4[1];\n\n  const _useState5 = useState(\"No connection to the network.\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        message = _useState6[0],\n        setMessage = _useState6[1]; //default message\n\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        newMessage = _useState8[0],\n        setNewMessage = _useState8[1]; //called only once\n\n\n  useEffect(async () => {\n    // const message = await getRegistrationStatus();\n    // setMessage(message);\n    addSmartContractListener();\n\n    const _ref = await getCurrentWalletConnected(),\n          address = _ref.address,\n          status = _ref.status;\n\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n  }, []);\n\n  function addSmartContractListener() {\n    CarSharingContract.events.UserRegistereda({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"🎉 Your message has been updated!\");\n      }\n    });\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \" \", \"\\uD83E\\uDD8A\", \" \", React.createElement(\"a\", {\n        target: \"_blank\",\n        href: \"https://metamask.io/download.html\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")));\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  }; // interactions\n\n\n  const loadRegistrationStatus = async () => {\n    const status = await CarSharingContract.methods.getRegistrationStatus(walletAddress).call();\n    return status;\n  };\n\n  const registerUser = async () => {\n    await CarSharingContract.methods.registerDriver(this.state.userName, this.state.userId).send({\n      from: walletAddress\n    });\n    let response = await CarSharingContract.methods.getRegistrationStatus(walletAddress).call();\n\n    if (response == true) {\n      this.setState({\n        registrationStatus: \"You are registered\"\n      });\n    }\n  };\n\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const obj = {\n          status: \"👆🏽 Write a message in the text-field above.\",\n          address: addressArray[0]\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, \" \", \"\\uD83E\\uDD8A\", \" \", React.createElement(\"a\", {\n          target: \"_blank\",\n          href: \"https://metamask.io/download.html\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")))\n      };\n    }\n  };\n\n  const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\"\n        });\n\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\"\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\"\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, \" \", \"\\uD83E\\uDD8A\", \" \", React.createElement(\"a\", {\n          target: \"_blank\",\n          href: \"https://metamask.io/download.html\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")))\n      };\n    }\n  }; // ------------------------------\n  //the UI of our component\n\n\n  return React.createElement(\"div\", {\n    id: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    id: \"walletButton\",\n    onClick: connectWalletPressed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, \"Connect Wallet\")), React.createElement(\"h2\", {\n    style: {\n      paddingTop: \"50px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"Current Message:\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, message), React.createElement(\"h2\", {\n    style: {\n      paddingTop: \"18px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"New Message:\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Update the message in your smart contract.\",\n    onChange: e => setNewMessage(e.target.value),\n    value: newMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    id: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, status), React.createElement(\"button\", {\n    id: \"publish\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, \"Update\")));\n};\n\nexport default HelloWorld;","map":{"version":3,"sources":["/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js"],"names":["React","Component","useEffect","useState","CarSharingContract","getWeb3","HelloWorld","walletAddress","setWallet","status","setStatus","message","setMessage","newMessage","setNewMessage","addSmartContractListener","getCurrentWalletConnected","address","addWalletListener","events","UserRegistereda","error","data","returnValues","window","ethereum","on","accounts","length","connectWalletPressed","walletResponse","connectWallet","loadRegistrationStatus","methods","getRegistrationStatus","call","registerUser","registerDriver","state","userName","userId","send","from","response","setState","registrationStatus","addressArray","request","method","obj","err","String","substring","paddingTop","e","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\n\n\nconst HelloWorld = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(async () => {\n    // const message = await getRegistrationStatus();\n    // setMessage(message);\n    addSmartContractListener();\n\n    const { address, status } = await getCurrentWalletConnected();\n\n    setWallet(address);\n    setStatus(status);\n\n    addWalletListener();\n  }, []);\n\n  function addSmartContractListener() {\n    CarSharingContract.events.UserRegistereda({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"🎉 Your message has been updated!\");\n      }\n    });\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n\n  // interactions\n\n const loadRegistrationStatus = async () => {\n  const status = await CarSharingContract.methods.getRegistrationStatus(walletAddress).call();\n  return status;\n};\n\n\n const registerUser = async () => {\n  await CarSharingContract.methods.registerDriver(this.state.userName, this.state.userId).send({ from: walletAddress });\n\n  let response = await CarSharingContract.methods.getRegistrationStatus(walletAddress).call();\n  if(response == true){\n    this.setState({ registrationStatus: \"You are registered\"});\n  }\n  \n};\n\n const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\n const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\n// ------------------------------\n\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n      \n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\n      <p>{message}</p>\n\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Update the message in your smart contract.\"\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n        <p id=\"status\">{status}</p>\n\n        <button id=\"publish\">\n          Update\n        </button>\n      </div>\n    </div>\n  );\n};\n\n\n\nexport default HelloWorld;"]},"metadata":{},"sourceType":"module"}
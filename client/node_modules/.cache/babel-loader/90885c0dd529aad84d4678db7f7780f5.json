{"ast":null,"code":"var _jsxFileName = \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      message: null,\n      userName: null,\n      userId: null,\n      rentStatus: null,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n        // const networkId = await web3.eth.net.getId();\n        // const deployedNetwork = SimpleStorageContract.networks[networkId];\n        // const instance = new web3.eth.Contract(\n        //   SimpleStorageContract.abi,\n        //   deployedNetwork && deployedNetwork.address,\n        // );\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = CarSharingContract.networks[networkId];\n        const instance = new web3.eth.Contract(CarSharingContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.startApp);\n        instance.events.UserRegistered({}, (error, data) => {\n          if (error) {\n            alert(error.message);\n          } else {\n            alert(data.returnValues[1]);\n          }\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.testWrite = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            contract = _this$state2.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.writeMessage(\"test\").send({\n        from: accounts[0]\n      });\n    };\n\n    this.startApp = async () => {\n      const _this$state3 = this.state,\n            accounts = _this$state3.accounts,\n            contract = _this$state3.contract; // Stores a given value\n      //await contract.methods.rentCar(10).send({ from: accounts[0] });\n\n      let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n\n      if (response == true) {\n        this.setState({\n          registrationStatus: \"You are registered\"\n        });\n      } // Get the value from the contract to prove it worked.\n      //  const response = await contract.methods.getRentStatus(accounts[1]).call();\n      //   if(response == true){\n      //     this.setState({ rentStatus: \"A car has been assigned to you\" });\n      //   }else{\n      //     this.setState({ rentStatus: \"No car is assigned to you\" });\n      //   }\n      //  const response2 = await contract.methods.getRegistrationStatus(accounts[1]).call();\n      //   if(response2 == true){\n      //     this.setState({ registrationStatus: \"You are registered\" });\n      //   }else{\n      //     this.setState({ registrationStatus: \"You are not registered\" });\n      //   }\n\n    };\n\n    this.rentCar = async () => {\n      const _this$state4 = this.state,\n            accounts = _this$state4.accounts,\n            contract = _this$state4.contract; // Stores a given value\n      // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.rentCar(10).call();\n\n      if (response == 1) {\n        this.setState({\n          rentStatus: \"A car has been assigned to you\"\n        });\n      } else {\n        this.setState({\n          rentStatus: \"No car is assigned to you\"\n        });\n      }\n    };\n\n    this.registerUser = async () => {\n      const _this$state5 = this.state,\n            accounts = _this$state5.accounts,\n            contract = _this$state5.contract; // Stores a given value\n      // Get the value from the contract to prove it worked.\n\n      try {\n        await contract.methods.registerDriver(this.state.userName, this.state.userId).send({\n          from: accounts[0]\n        }); //truffleAssert.eventEmitted(result, 'New)\n\n        let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n\n        if (response == true) {\n          this.setState({\n            registrationStatus: \"You are registered\"\n          });\n        }\n      } catch (err) {\n        //let message = JSON.parse(err.message.substring(56).trim().replace(\"'\", \"\")).value.data.data;\n        //console.log(message[Object.keys(message)[0]].reason);\n        this.setState({\n          message: \"test\"\n        });\n      }\n    };\n\n    this.setStorage = async () => {\n      // Stores a given value\n      await this.state.contract.methods.set(3).send({\n        from: this.state.accounts\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await this.state.contract.methods.get().call(); // Update state with the result.\n\n      return this.setState({\n        storageValue: response\n      });\n    };\n\n    this.inputChanged = e => {\n      this.setState({\n        inputVal: e.target.value\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Welcome to SG Car Sharing Service!\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.state.message), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Name: \"), React.createElement(\"input\", {\n      onChange: event => this.setState({\n        userName: event.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"ID: \"), React.createElement(\"input\", {\n      onChange: event => this.setState({\n        userId: event.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.registerUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Register\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Registration Status: \", this.state.registrationStatus), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Rent Status: \", this.state.rentStatus), React.createElement(\"button\", {\n      onClick: this.rentCar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Rent Car\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js"],"names":["React","Component","useEffect","useState","SimpleStorageContract","CarSharingContract","getWeb3","App","state","message","userName","userId","rentStatus","web3","accounts","contract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","startApp","events","UserRegistered","error","data","alert","returnValues","console","runExample","methods","set","send","from","response","get","call","storageValue","testWrite","writeMessage","getRegistrationStatus","registrationStatus","rentCar","registerUser","registerDriver","err","setStorage","inputChanged","e","inputVal","target","value","render","event"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\nclass App extends Component {\n  state = { message: null, userName: null, userId: null, rentStatus: null, web3: null, accounts: null, contract: null };\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = SimpleStorageContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   SimpleStorageContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        CarSharingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.startApp);\n\n      instance.events.UserRegistered({}, (error, data) => {\n        if (error) {\n          alert(error.message);\n        } else{\n          alert(data.returnValues[1]);\n        }\n        \n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  testWrite = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.writeMessage(\"test\").send({from: accounts[0]});\n\n  \n  };\n\n  startApp = async () => {\n    const { accounts, contract } = this.state;\n    // Stores a given value\n   //await contract.methods.rentCar(10).send({ from: accounts[0] });\n   let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n   if(response == true){\n     this.setState({ registrationStatus: \"You are registered\"});\n   }\n   // Get the value from the contract to prove it worked.\n  //  const response = await contract.methods.getRentStatus(accounts[1]).call();\n  //   if(response == true){\n  //     this.setState({ rentStatus: \"A car has been assigned to you\" });\n  //   }else{\n  //     this.setState({ rentStatus: \"No car is assigned to you\" });\n  //   }\n\n  //  const response2 = await contract.methods.getRegistrationStatus(accounts[1]).call();\n\n  //   if(response2 == true){\n  //     this.setState({ registrationStatus: \"You are registered\" });\n  //   }else{\n  //     this.setState({ registrationStatus: \"You are not registered\" });\n  //   }\n    \n };\n\n rentCar = async () => {\n  const { accounts, contract } = this.state;\n  // Stores a given value\n \n\n // Get the value from the contract to prove it worked.\n const response = await contract.methods.rentCar(10).call();\n  if(response == 1){\n    this.setState({ rentStatus: \"A car has been assigned to you\" });\n  }else{\n    this.setState({ rentStatus: \"No car is assigned to you\" });\n  }\n     \n};\n\nregisterUser = async () => {\n  const { accounts, contract } = this.state;\n  // Stores a given value\n \n\n // Get the value from the contract to prove it worked.\n try{\n  await contract.methods.registerDriver(this.state.userName, this.state.userId).send({ from: accounts[0] });\n\n  //truffleAssert.eventEmitted(result, 'New)\n  let response = await contract.methods.getRegistrationStatus(accounts[0]).call();\n  if(response == true){\n    this.setState({ registrationStatus: \"You are registered\"});\n  }\n }catch(err){\n  //let message = JSON.parse(err.message.substring(56).trim().replace(\"'\", \"\")).value.data.data;\n  //console.log(message[Object.keys(message)[0]].reason);\n   this.setState({ message: \"test\"});\n }\n  \n};\n\n  setStorage = async () => {\n\n    // Stores a given value\n   await this.state.contract.methods.set(3).send({ from: this.state.accounts });\n\n   // Get the value from the contract to prove it worked.\n   const response = await this.state.contract.methods.get().call();\n\n   // Update state with the result.\n   return this.setState({ storageValue: response });\n };\n\n inputChanged = (e) => {\n  this.setState({ inputVal: e.target.value });\n}\n  \n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Welcome to SG Car Sharing Service!</h1>\n        <label>{this.state.message}</label>\n        <label>Name: </label>\n        <input onChange={event => this.setState({ userName: event.target.value })}/>\n        <label>ID: </label>\n        <input onChange={event => this.setState({ userId: event.target.value })}/>\n        <button onClick={this.registerUser}>Register</button>\n          <div>Registration Status: {this.state.registrationStatus}</div>\n          <div>Rent Status: {this.state.rentStatus}</div>\n          <button onClick={this.rentCar}>Rent Car</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
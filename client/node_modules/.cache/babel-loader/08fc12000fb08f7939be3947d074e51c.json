{"ast":null,"code":"var _jsxFileName = \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      message: null,\n      userName: null,\n      userId: null,\n      rentStatus: null,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n        // const networkId = await web3.eth.net.getId();\n        // const deployedNetwork = SimpleStorageContract.networks[networkId];\n        // const instance = new web3.eth.Contract(\n        //   SimpleStorageContract.abi,\n        //   deployedNetwork && deployedNetwork.address,\n        // );\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = CarSharingContract.networks[networkId];\n        const instance = new web3.eth.Contract(CarSharingContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.rentCar);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.rentCar = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            contract = _this$state2.contract; // Stores a given value\n\n      await contract.methods.rentCar(10).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.getRentStatus(accounts[0]).call();\n\n      if (response == 1) {\n        this.setState({\n          rentStatus: \"Car rented\"\n        });\n      } else {\n        this.setState({\n          rentStatus: \"Car not rented\"\n        });\n      }\n\n      const response2 = await contract.methods.getRegistrationStatus(accounts[0]).call();\n\n      if (response2 == 1) {\n        this.setState({\n          registrationStatus: \"User registered\"\n        });\n      } else {\n        this.setState({\n          registrationStatus: \"User not registered\"\n        });\n      }\n    };\n\n    this.rentCar2 = async () => {\n      const _this$state3 = this.state,\n            accounts = _this$state3.accounts,\n            contract = _this$state3.contract; // Stores a given value\n\n      await contract.methods.rentCar(10).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.getRentStatus(accounts[0]).call();\n      return this.setState({\n        rentStatus: \"Car Not Rented\"\n      });\n    };\n\n    this.registerUser = async () => {\n      const _this$state4 = this.state,\n            accounts = _this$state4.accounts,\n            contract = _this$state4.contract; // Stores a given value\n      // Get the value from the contract to prove it worked.\n\n      try {\n        const response = await contract.methods.registerDriver(this.state.userName, this.state.userId).send({\n          from: accounts[0]\n        });\n\n        if (response == 1) {\n          this.setState({\n            registrationStatus: \"Registration success!\"\n          });\n        }\n      } catch (err) {\n        let message = JSON.parse(err.message.substring(56).trim().replace(\"'\", \"\")).value.data.data;\n        console.log(message[Object.keys(message)[0]].reason);\n        this.setState({\n          message: message[Object.keys(message)[0]].reason\n        });\n      }\n    };\n\n    this.setStorage = async () => {\n      // Stores a given value\n      await this.state.contract.methods.set(3).send({\n        from: this.state.accounts\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await this.state.contract.methods.get().call(); // Update state with the result.\n\n      return this.setState({\n        storageValue: response\n      });\n    };\n\n    this.inputChanged = e => {\n      this.setState({\n        inputVal: e.target.value\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Welcome to SG Car Sharing Service!\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, this.state.message), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Name: \"), React.createElement(\"input\", {\n      onChange: event => this.setState({\n        userName: event.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"ID: \"), React.createElement(\"input\", {\n      onChange: event => this.setState({\n        userId: event.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.registerUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Register\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Name: \", this.state.userName), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Registration Status: \", this.state.registrationStatus), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Rent Status: \", this.state.rentStatus), React.createElement(\"button\", {\n      onClick: this.rentCar2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Rent Car\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js"],"names":["React","Component","SimpleStorageContract","CarSharingContract","getWeb3","App","state","message","userName","userId","rentStatus","web3","accounts","contract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","rentCar","error","alert","console","runExample","methods","set","send","from","response","get","call","storageValue","getRentStatus","response2","getRegistrationStatus","registrationStatus","rentCar2","registerUser","registerDriver","err","JSON","parse","substring","trim","replace","value","data","log","Object","keys","reason","setStorage","inputChanged","e","inputVal","target","render","event"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { message: null, userName: null, userId: null, rentStatus: null, web3: null, accounts: null, contract: null };\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = SimpleStorageContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   SimpleStorageContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        CarSharingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.rentCar);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  rentCar = async () => {\n    const { accounts, contract } = this.state;\n    // Stores a given value\n   await contract.methods.rentCar(10).send({ from: accounts[0] });\n\n   // Get the value from the contract to prove it worked.\n   const response = await contract.methods.getRentStatus(accounts[0]).call();\n    if(response == 1){\n      this.setState({ rentStatus: \"Car rented\" });\n    }else{\n      this.setState({ rentStatus: \"Car not rented\" });\n    }\n\n   const response2 = await contract.methods.getRegistrationStatus(accounts[0]).call();\n    if(response2 == 1){\n      this.setState({ registrationStatus: \"User registered\" });\n    }else{\n      this.setState({ registrationStatus: \"User not registered\" });\n    }\n    \n };\n\n rentCar2 = async () => {\n  const { accounts, contract } = this.state;\n  // Stores a given value\n await contract.methods.rentCar(10).send({ from: accounts[0] });\n\n // Get the value from the contract to prove it worked.\n const response = await contract.methods.getRentStatus(accounts[0]).call();\n  \n    return this.setState({ rentStatus: \"Car Not Rented\" });\n};\n\nregisterUser = async () => {\n  const { accounts, contract } = this.state;\n  // Stores a given value\n \n\n // Get the value from the contract to prove it worked.\n try{\n  const response = await contract.methods.registerDriver(this.state.userName, this.state.userId).send({ from: accounts[0] });\n  if(response == 1){\n    this.setState({ registrationStatus: \"Registration success!\" });\n  }\n }catch(err){\n  let message = JSON.parse(err.message.substring(56).trim().replace(\"'\", \"\")).value.data.data;\n  console.log(message[Object.keys(message)[0]].reason);\n   this.setState({ message: message[Object.keys(message)[0]].reason });\n }\n  \n};\n\n  setStorage = async () => {\n\n    // Stores a given value\n   await this.state.contract.methods.set(3).send({ from: this.state.accounts });\n\n   // Get the value from the contract to prove it worked.\n   const response = await this.state.contract.methods.get().call();\n\n   // Update state with the result.\n   return this.setState({ storageValue: response });\n };\n\n inputChanged = (e) => {\n  this.setState({ inputVal: e.target.value });\n}\n  \n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Welcome to SG Car Sharing Service!</h1>\n        <label>{this.state.message}</label>\n        <label>Name: </label>\n        <input onChange={event => this.setState({ userName: event.target.value })}/>\n        <label>ID: </label>\n        <input onChange={event => this.setState({ userId: event.target.value })}/>\n        <button onClick={this.registerUser}>Register</button>\n        <div>Name: {this.state.userName}</div>\n          <div>Registration Status: {this.state.registrationStatus}</div>\n          <div>Rent Status: {this.state.rentStatus}</div>\n          <button onClick={this.rentCar2}>Rent Car</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
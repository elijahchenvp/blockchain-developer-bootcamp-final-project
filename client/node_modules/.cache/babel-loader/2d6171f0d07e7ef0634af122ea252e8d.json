{"ast":null,"code":"import _slicedToArray from \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nconst App = () => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        message = _useState2[0],\n        setMessage = _useState2[1]; //default message\n\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        walletAddress = _useState4[0],\n        setWallet = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        status = _useState6[0],\n        setStatus = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        regStatus = _useState8[0],\n        setRegStatus = _useState8[1];\n\n  const _useState9 = useState(\"User Registered 🔴\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        registrationStatus = _useState10[0],\n        setRegistrationStatus = _useState10[1];\n\n  const _useState11 = useState(\"Car Reserved 🔴\"),\n        _useState12 = _slicedToArray(_useState11, 2),\n        rentStatus = _useState12[0],\n        setRentStatus = _useState12[1];\n\n  const _useState13 = useState(\"0\"),\n        _useState14 = _slicedToArray(_useState13, 2),\n        userRegistered = _useState14[0],\n        setUserRegistered = _useState14[1];\n\n  const _useState15 = useState(\"0\"),\n        _useState16 = _slicedToArray(_useState15, 2),\n        userRented = _useState16[0],\n        setUserRented = _useState16[1];\n\n  const _useState17 = useState(\"\"),\n        _useState18 = _slicedToArray(_useState17, 2),\n        contract = _useState18[0],\n        setContract = _useState18[1];\n\n  const _useState19 = useState(\"test\"),\n        _useState20 = _slicedToArray(_useState19, 2),\n        content = _useState20[0],\n        setContent = _useState20[1];\n\n  const _useState21 = useState(\"\"),\n        _useState22 = _slicedToArray(_useState21, 2),\n        userName = _useState22[0],\n        setUserName = _useState22[1];\n\n  const _useState23 = useState(\"\"),\n        _useState24 = _slicedToArray(_useState23, 2),\n        license = _useState24[0],\n        setLicense = _useState24[1];\n\n  const _useState25 = useState(\"\"),\n        _useState26 = _slicedToArray(_useState25, 2),\n        plateNo = _useState26[0],\n        setPlateNo = _useState26[1]; //state = { message: null, userName: null, userId: null, rentStatus: null, web3: null, accounts: null, contract: null };\n\n\n  useEffect(async () => {\n    await whenWalletConnected(); // const message = \"hello\";\n    // setMessage(message);\n  }, []);\n\n  const whenWalletConnected = async () => {\n    const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n    const accounts = await web3.eth.getAccounts();\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = CarSharingContract.networks[networkId];\n    const instance = new web3.eth.Contract(CarSharingContract.abi, deployedNetwork && deployedNetwork.address);\n    setContract(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n    // example of interacting with the contract's methods.\n    //this.setState({ web3, accounts, contract: instance }, this.startApp);\n\n    instance.events.UserRegistered({}, (error, data) => {\n      if (error) {\n        setMessage(error.message);\n      } else {\n        setRegistrationStatus(\"User Registered 🟢\");\n        setUserRegistered(\"1\");\n      }\n    });\n    instance.events.CarReserved({}, (error, data) => {\n      if (error) {\n        setMessage(error.message);\n      } else {\n        setRentStatus(\"Car Reserved 🟢\");\n        setUserRented(\"1\");\n      }\n    });\n    instance.events.CarReleased({}, (error, data) => {\n      if (error) {\n        setMessage(error.message);\n      } else {\n        setRentStatus(\"Car Reserved 🔴\");\n      }\n    });\n  };\n\n  const componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = SimpleStorageContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   SimpleStorageContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(CarSharingContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      //this.setState({ web3, accounts, contract: instance }, this.startApp);\n\n      instance.events.UserRegistered({}, (error, data) => {\n        if (error) {\n          alert(error.message);\n        } else {\n          this.setState({\n            registrationStatus: \"You are registered\"\n          });\n        }\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n      console.error(error);\n    }\n  };\n\n  const runExample = async () => {\n    const _this$state = this.state,\n          accounts = _this$state.accounts,\n          contract = _this$state.contract; // Stores a given value, 5 by default.\n\n    await contract.methods.set(5).send({\n      from: accounts[0]\n    }); // Get the value from the contract to prove it worked.\n\n    const response = await contract.methods.get().call(); // Update state with the result.\n\n    this.setState({\n      storageValue: response\n    });\n  };\n\n  const rentCar = async () => {\n    await contract.methods.rentCar(10, plateNo).send({\n      from: walletAddress\n    });\n  };\n\n  const unrentCar = async () => {\n    await contract.methods.unrentCar(plateNo).send({\n      from: walletAddress\n    });\n  };\n\n  const registerUser = async () => {\n    if (userRegistered == \"0\") {\n      await contract.methods.registerDriver(userName, license).send({\n        from: walletAddress\n      });\n    } else {\n      setRegStatus(\"You are already registered!\");\n    }\n  };\n\n  const getUserStatus = async address => {\n    let response = await contract.methods.getRegistrationStatus(address).call();\n\n    if (response) {\n      setRegistrationStatus(\"User Registered 🟢\");\n      setUserRegistered(\"1\");\n    } else {\n      setRegistrationStatus(\"User Registered 🔴\");\n      setContent('<div>' + '<h3 style={{ paddingTop: \"18px\" }}>User Registration</h3>' + ' <h3 style={{ paddingTop: \"18px\" }}>Name:</h3>' + '   <input' + '     type=\"text\"' + '     placeholder=\"e.g. John Wick\"' + '   />' + '  <h3 style={{ paddingTop: \"18px\" }}>License:</h3>' + '   <input' + '     type=\"text\"' + '     placeholder=\"e.g. ID12345\"' + '   />' + ' </div> ' + ' <button id=\"publish\" style={{ float: \"right\"}}>' + '     Register' + '   </button>');\n    }\n\n    response = await contract.methods.getRentStatus(address).call();\n\n    if (response) {\n      setRentStatus(\"Car Reserved 🟢\");\n    } else {\n      setRentStatus(\"Car Reserved ❌\");\n    }\n  }; // getCurrentWalletConnected = async () => {\n  //   if (window.ethereum) {\n  //     try {\n  //       const addressArray = await window.ethereum.request({\n  //         method: \"eth_accounts\",\n  //       });\n  //       if (addressArray.length > 0) {\n  //         return {\n  //           address: addressArray[0],\n  //           status: \"👆🏽 Write a message in the text-field above.\",\n  //         };\n  //       } else {\n  //         return {\n  //           address: \"\",\n  //           status: \"🦊 Connect to Metamask using the top right button.\",\n  //         };\n  //       }\n  //     } catch (err) {\n  //       return {\n  //         address: \"\",\n  //         status: \"😥 \" + err.message,\n  //       };\n  //     }\n  //   } else {\n  //     return {\n  //       address: \"\",\n  //       status: (\n  //         <span>\n  //           <p>\n  //             {\" \"}\n  //             🦊{\" \"}\n  //             <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n  //               You must install Metamask, a virtual Ethereum wallet, in your\n  //               browser.\n  //             </a>\n  //           </p>\n  //         </span>\n  //       ),\n  //     };\n  //   }\n  // };\n\n\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const obj = {\n          status: \"👆🏽 Enter any Teslo car plate no. above to reserve!\",\n          regStatus: \"👆🏽 Register first to start car sharing!\",\n          address: addressArray[0]\n        };\n        setStatus(obj.status);\n        setRegStatus(obj.regStatus);\n        setWallet(obj.address);\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          },\n          __self: this\n        }, \" \", \"\\uD83E\\uDD8A\", \" \", React.createElement(\"a\", {\n          target: \"_blank\",\n          href: \"https://metamask.io/download.html\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255\n          },\n          __self: this\n        }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")))\n      };\n    }\n  }; // const inputChanged = (e) => {\n  //   this.setState({ inputVal: e.target.value });\n  // }\n\n\n  const connectWalletPressed = async () => {\n    await connectWallet().then(response => {\n      getUserStatus(response.address);\n    }, error => {\n      /**\n       * Handle error here\n       */\n    });\n    ;\n  }; // if (!this.state.web3) {\n  //   return <div>Loading Web3, accounts, and contract...</div>;\n  // }\n\n\n  return React.createElement(\"div\", {\n    id: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    id: \"walletButton\",\n    onClick: connectWalletPressed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, \"Connect Wallet\")), React.createElement(\"h1\", {\n    style: {\n      paddingTop: \"50px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, \"Teslo Car Sharing Service\"), React.createElement(\"p\", {\n    id: \"registrationStatus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, registrationStatus), React.createElement(\"p\", {\n    id: \"rentStatus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, rentStatus), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, message), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    style: {\n      paddingTop: \"18px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    },\n    __self: this\n  }, \"User Registration\"), React.createElement(\"h3\", {\n    style: {\n      paddingTop: \"18px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, \"Name:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"e.g. John Wick\",\n    onChange: e => setUserName(e.target.value),\n    value: userName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    style: {\n      paddingTop: \"18px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311\n    },\n    __self: this\n  }, \"License:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"e.g. ID12345\",\n    onChange: e => setLicense(e.target.value),\n    value: license,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    id: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318\n    },\n    __self: this\n  }, regStatus)), React.createElement(\"button\", {\n    id: \"publish\",\n    style: {\n      float: \"right\"\n    },\n    onClick: registerUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }, \"Register\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    style: {\n      paddingTop: \"18px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326\n    },\n    __self: this\n  }, \"Car Reservation\"), React.createElement(\"h3\", {\n    style: {\n      paddingTop: \"18px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327\n    },\n    __self: this\n  }, \"Plate No.:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"e.g. SJW1011E\",\n    onChange: e => setPlateNo(e.target.value),\n    value: plateNo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    id: \"publish\",\n    style: {\n      float: \"right\"\n    },\n    onClick: rentCar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335\n    },\n    __self: this\n  }, \"Reserve\"), React.createElement(\"button\", {\n    id: \"publish\",\n    style: {\n      float: \"right\"\n    },\n    onClick: unrentCar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338\n    },\n    __self: this\n  }, \"Release\"), React.createElement(\"p\", {\n    id: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341\n    },\n    __self: this\n  }, status));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/elijahchen/blockchain-developer-bootcamp/blockchain-developer-bootcamp-final-project/client/src/App.js"],"names":["React","Component","useEffect","useState","SimpleStorageContract","CarSharingContract","getWeb3","App","message","setMessage","walletAddress","setWallet","status","setStatus","regStatus","setRegStatus","registrationStatus","setRegistrationStatus","rentStatus","setRentStatus","userRegistered","setUserRegistered","userRented","setUserRented","contract","setContract","content","setContent","userName","setUserName","license","setLicense","plateNo","setPlateNo","whenWalletConnected","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","events","UserRegistered","error","data","CarReserved","CarReleased","componentDidMount","alert","setState","console","runExample","state","methods","set","send","from","response","get","call","storageValue","rentCar","unrentCar","registerUser","registerDriver","getUserStatus","getRegistrationStatus","getRentStatus","connectWallet","window","ethereum","addressArray","request","method","obj","err","connectWalletPressed","then","length","String","substring","paddingTop","e","target","value","float"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA,oBAEcJ,QAAQ,CAAC,EAAD,CAFtB;AAAA;AAAA,QAETK,OAFS;AAAA,QAEAC,UAFA,kBAE4B;;;AAF5B,qBAGmBN,QAAQ,CAAC,EAAD,CAH3B;AAAA;AAAA,QAGTO,aAHS;AAAA,QAGMC,SAHN;;AAAA,qBAIYR,QAAQ,CAAC,EAAD,CAJpB;AAAA;AAAA,QAITS,MAJS;AAAA,QAIDC,SAJC;;AAAA,qBAKkBV,QAAQ,CAAC,EAAD,CAL1B;AAAA;AAAA,QAKTW,SALS;AAAA,QAKEC,YALF;;AAAA,qBAMoCZ,QAAQ,CAAC,oBAAD,CAN5C;AAAA;AAAA,QAMTa,kBANS;AAAA,QAMWC,qBANX;;AAAA,sBAOoBd,QAAQ,CAAC,iBAAD,CAP5B;AAAA;AAAA,QAOTe,UAPS;AAAA,QAOGC,aAPH;;AAAA,sBAQ4BhB,QAAQ,CAAC,GAAD,CARpC;AAAA;AAAA,QAQTiB,cARS;AAAA,QAQOC,iBARP;;AAAA,sBASoBlB,QAAQ,CAAC,GAAD,CAT5B;AAAA;AAAA,QASTmB,UATS;AAAA,QASGC,aATH;;AAAA,sBAUgBpB,QAAQ,CAAC,EAAD,CAVxB;AAAA;AAAA,QAUTqB,QAVS;AAAA,QAUCC,WAVD;;AAAA,sBAWctB,QAAQ,CAAC,MAAD,CAXtB;AAAA;AAAA,QAWTuB,OAXS;AAAA,QAWAC,UAXA;;AAAA,sBAYgBxB,QAAQ,CAAC,EAAD,CAZxB;AAAA;AAAA,QAYTyB,QAZS;AAAA,QAYCC,WAZD;;AAAA,sBAac1B,QAAQ,CAAC,EAAD,CAbtB;AAAA;AAAA,QAaT2B,OAbS;AAAA,QAaAC,UAbA;;AAAA,sBAcc5B,QAAQ,CAAC,EAAD,CAdtB;AAAA;AAAA,QAcT6B,OAdS;AAAA,QAcAC,UAdA,mBAehB;;;AAEA/B,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAMgC,mBAAmB,EAAzB,CADoB,CAEpB;AACA;AAED,GALQ,EAKN,EALM,CAAT;;AAOA,QAAMA,mBAAmB,GAAG,YAAY;AACpC,UAAMC,IAAI,GAAG,MAAM7B,OAAO,EAA1B,CADoC,CAGpC;;AACA,UAAM8B,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAAvB;AACA,UAAMC,SAAS,GAAG,MAAMJ,IAAI,CAACE,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,UAAMC,eAAe,GAAGrC,kBAAkB,CAACsC,QAAnB,CAA4BJ,SAA5B,CAAxB;AACA,UAAMK,QAAQ,GAAG,IAAIT,IAAI,CAACE,GAAL,CAASQ,QAAb,CACfxC,kBAAkB,CAACyC,GADJ,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAAjB;AAIAtB,IAAAA,WAAW,CAACmB,QAAD,CAAX,CAXoC,CAYpC;AACA;AACA;;AAEAA,IAAAA,QAAQ,CAACI,MAAT,CAAgBC,cAAhB,CAA+B,EAA/B,EAAmC,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAClD,UAAID,KAAJ,EAAW;AACTzC,QAAAA,UAAU,CAACyC,KAAK,CAAC1C,OAAP,CAAV;AACD,OAFD,MAEM;AACJS,QAAAA,qBAAqB,CAAC,oBAAD,CAArB;AACAI,QAAAA,iBAAiB,CAAC,GAAD,CAAjB;AACD;AACF,KAPD;AASAuB,IAAAA,QAAQ,CAACI,MAAT,CAAgBI,WAAhB,CAA4B,EAA5B,EAAgC,CAACF,KAAD,EAAQC,IAAR,KAAiB;AAC/C,UAAID,KAAJ,EAAW;AACTzC,QAAAA,UAAU,CAACyC,KAAK,CAAC1C,OAAP,CAAV;AACD,OAFD,MAEM;AACJW,QAAAA,aAAa,CAAC,iBAAD,CAAb;AACAI,QAAAA,aAAa,CAAC,GAAD,CAAb;AACD;AACF,KAPD;AASAqB,IAAAA,QAAQ,CAACI,MAAT,CAAgBK,WAAhB,CAA4B,EAA5B,EAAgC,CAACH,KAAD,EAAQC,IAAR,KAAiB;AAC/C,UAAID,KAAJ,EAAW;AACTzC,QAAAA,UAAU,CAACyC,KAAK,CAAC1C,OAAP,CAAV;AACD,OAFD,MAEM;AACJW,QAAAA,aAAa,CAAC,iBAAD,CAAb;AACD;AACF,KAND;AAOH,GAzCD;;AA2CA,QAAMmC,iBAAiB,GAAG,YAAY;AACpC,QAAI;AACF;AACA,YAAMnB,IAAI,GAAG,MAAM7B,OAAO,EAA1B,CAFE,CAIF;;AACA,YAAM8B,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAAvB,CALE,CAOF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAMC,SAAS,GAAG,MAAMJ,IAAI,CAACE,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,YAAMC,eAAe,GAAGrC,kBAAkB,CAACsC,QAAnB,CAA4BJ,SAA5B,CAAxB;AACA,YAAMK,QAAQ,GAAG,IAAIT,IAAI,CAACE,GAAL,CAASQ,QAAb,CACfxC,kBAAkB,CAACyC,GADJ,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAAjB,CAjBE,CAsBF;AACA;AACA;;AAEAH,MAAAA,QAAQ,CAACI,MAAT,CAAgBC,cAAhB,CAA+B,EAA/B,EAAmC,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAClD,YAAID,KAAJ,EAAW;AACTK,UAAAA,KAAK,CAACL,KAAK,CAAC1C,OAAP,CAAL;AACD,SAFD,MAEM;AACJ,eAAKgD,QAAL,CAAc;AAAExC,YAAAA,kBAAkB,EAAE;AAAtB,WAAd;AACD;AAEF,OAPD;AAQD,KAlCD,CAkCE,OAAOkC,KAAP,EAAc;AACd;AACAK,MAAAA,KAAK,0EAAL;AAGAE,MAAAA,OAAO,CAACP,KAAR,CAAcA,KAAd;AACD;AACF,GA1CD;;AA4CA,QAAMQ,UAAU,GAAG,YAAY;AAAA,wBACE,KAAKC,KADP;AAAA,UACrBvB,QADqB,eACrBA,QADqB;AAAA,UACXZ,QADW,eACXA,QADW,EAG7B;;AACA,UAAMA,QAAQ,CAACoC,OAAT,CAAiBC,GAAjB,CAAqB,CAArB,EAAwBC,IAAxB,CAA6B;AAAEC,MAAAA,IAAI,EAAE3B,QAAQ,CAAC,CAAD;AAAhB,KAA7B,CAAN,CAJ6B,CAM7B;;AACA,UAAM4B,QAAQ,GAAG,MAAMxC,QAAQ,CAACoC,OAAT,CAAiBK,GAAjB,GAAuBC,IAAvB,EAAvB,CAP6B,CAS7B;;AACA,SAAKV,QAAL,CAAc;AAAEW,MAAAA,YAAY,EAAEH;AAAhB,KAAd;AACD,GAXD;;AAaD,QAAMI,OAAO,GAAG,YAAY;AAC5B,UAAM5C,QAAQ,CAACoC,OAAT,CAAiBQ,OAAjB,CAAyB,EAAzB,EAA6BpC,OAA7B,EAAsC8B,IAAtC,CAA2C;AAAEC,MAAAA,IAAI,EAAErD;AAAR,KAA3C,CAAN;AACA,GAFA;;AAID,QAAM2D,SAAS,GAAG,YAAY;AAC5B,UAAM7C,QAAQ,CAACoC,OAAT,CAAiBS,SAAjB,CAA2BrC,OAA3B,EAAoC8B,IAApC,CAAyC;AAAEC,MAAAA,IAAI,EAAErD;AAAR,KAAzC,CAAN;AACA,GAFF;;AAIA,QAAM4D,YAAY,GAAG,YAAY;AAC/B,QAAGlD,cAAc,IAAI,GAArB,EAAyB;AACvB,YAAMI,QAAQ,CAACoC,OAAT,CAAiBW,cAAjB,CAAgC3C,QAAhC,EAA0CE,OAA1C,EAAmDgC,IAAnD,CAAwD;AAAEC,QAAAA,IAAI,EAAErD;AAAR,OAAxD,CAAN;AACD,KAFD,MAEK;AACHK,MAAAA,YAAY,CAAC,6BAAD,CAAZ;AACD;AAEF,GAPD;;AASA,QAAMyD,aAAa,GAAG,MAAOzB,OAAP,IAAmB;AACvC,QAAIiB,QAAQ,GAAG,MAAMxC,QAAQ,CAACoC,OAAT,CAAiBa,qBAAjB,CAAuC1B,OAAvC,EAAgDmB,IAAhD,EAArB;;AACA,QAAGF,QAAH,EAAY;AACV/C,MAAAA,qBAAqB,CAAC,oBAAD,CAArB;AACAI,MAAAA,iBAAiB,CAAC,GAAD,CAAjB;AACD,KAHD,MAGK;AACHJ,MAAAA,qBAAqB,CAAC,oBAAD,CAArB;AACAU,MAAAA,UAAU,CAAC,UACR,2DADQ,GAER,gDAFQ,GAGR,WAHQ,GAIR,kBAJQ,GAKR,mCALQ,GAMR,OANQ,GAOR,oDAPQ,GAQR,WARQ,GASR,kBATQ,GAUR,iCAVQ,GAWR,OAXQ,GAaR,UAbQ,GAcR,kDAdQ,GAeR,eAfQ,GAgBR,cAhBO,CAAV;AAiBD;;AAEDqC,IAAAA,QAAQ,GAAG,MAAMxC,QAAQ,CAACoC,OAAT,CAAiBc,aAAjB,CAA+B3B,OAA/B,EAAwCmB,IAAxC,EAAjB;;AACA,QAAGF,QAAH,EAAY;AACV7C,MAAAA,aAAa,CAAC,iBAAD,CAAb;AACD,KAFD,MAEK;AACHA,MAAAA,aAAa,CAAC,gBAAD,CAAb;AACD;AACF,GAhCD,CA7IkB,CAgLlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMwD,aAAa,GAAG,YAAY;AAChC,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACnB,UAAI;AACF,cAAMC,YAAY,GAAG,MAAMF,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;AACjDC,UAAAA,MAAM,EAAE;AADyC,SAAxB,CAA3B;AAGA,cAAMC,GAAG,GAAG;AACVrE,UAAAA,MAAM,EAAE,sDADE;AAEVE,UAAAA,SAAS,EAAE,2CAFD;AAGViC,UAAAA,OAAO,EAAE+B,YAAY,CAAC,CAAD;AAHX,SAAZ;AAKAjE,QAAAA,SAAS,CAACoE,GAAG,CAACrE,MAAL,CAAT;AACAG,QAAAA,YAAY,CAACkE,GAAG,CAACnE,SAAL,CAAZ;AACAH,QAAAA,SAAS,CAACsE,GAAG,CAAClC,OAAL,CAAT;AACA,eAAOkC,GAAP;AACD,OAbD,CAaE,OAAOC,GAAP,EAAY;AACZ,eAAO;AACLnC,UAAAA,OAAO,EAAE,EADJ;AAELnC,UAAAA,MAAM,EAAE,QAAQsE,GAAG,CAAC1E;AAFf,SAAP;AAID;AACF,KApBD,MAoBO;AACL,aAAO;AACLuC,QAAAA,OAAO,EAAE,EADJ;AAELnC,QAAAA,MAAM,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,GADH,kBAEK,GAFL,EAGE;AAAG,UAAA,MAAM,EAAC,QAAV;AAAmB,UAAA,IAAI,qCAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFAHF,CADF;AAHG,OAAP;AAeD;AAEF,GAvCD,CA1NkB,CAmQlB;AACA;AACA;;;AAEA,QAAMuE,oBAAoB,GAAG,YAAY;AACxC,UAAMR,aAAa,GAAGS,IAAhB,CAAsBpB,QAAD,IAAc;AACxCQ,MAAAA,aAAa,CAACR,QAAQ,CAACjB,OAAV,CAAb;AACD,KAFM,EAEHG,KAAD,IAAW;AACZ;;;AAGD,KANM,CAAN;AAME;AACF,GARD,CAvQkB,CAiRd;AACA;AACA;;;AACA,SACE;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA;AAAQ,IAAA,EAAE,EAAC,cAAX;AAA0B,IAAA,OAAO,EAAEiC,oBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGzE,aAAa,CAAC2E,MAAd,GAAuB,CAAvB,GACC,gBACAC,MAAM,CAAC5E,aAAD,CAAN,CAAsB6E,SAAtB,CAAgC,CAAhC,EAAmC,CAAnC,CADA,GAEA,KAFA,GAGAD,MAAM,CAAC5E,aAAD,CAAN,CAAsB6E,SAAtB,CAAgC,EAAhC,CAJD,GAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPJ,CAFA,EAaA;AAAI,IAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAbA,EAcE;AAAG,IAAA,EAAE,EAAC,oBAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BxE,kBAA5B,CAdF,EAeE;AAAG,IAAA,EAAE,EAAC,YAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBE,UAApB,CAfF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIV,OAAJ,CAhBF,EAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,KAAK,EAAE;AAAEgF,MAAAA,UAAU,EAAE;AAAd,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAI,IAAA,KAAK,EAAE;AAAEA,MAAAA,UAAU,EAAE;AAAd,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,EAGD;AACG,IAAA,IAAI,EAAC,MADR;AAEG,IAAA,WAAW,EAAC,gBAFf;AAGG,IAAA,QAAQ,EAAGC,CAAD,IAAO5D,WAAW,CAAC4D,CAAC,CAACC,MAAF,CAASC,KAAV,CAH/B;AAIG,IAAA,KAAK,EAAE/D,QAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHC,EASD;AAAI,IAAA,KAAK,EAAE;AAAE4D,MAAAA,UAAU,EAAE;AAAd,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATC,EAUA;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,cAFd;AAGE,IAAA,QAAQ,EAAGC,CAAD,IAAO1D,UAAU,CAAC0D,CAAC,CAACC,MAAF,CAASC,KAAV,CAH7B;AAIE,IAAA,KAAK,EAAE7D,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVA,EAgBC;AAAG,IAAA,EAAE,EAAC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBhB,SAAhB,CAhBD,CAjBA,EAmCD;AAAQ,IAAA,EAAE,EAAC,SAAX;AAAqB,IAAA,KAAK,EAAE;AAAE8E,MAAAA,KAAK,EAAE;AAAT,KAA5B;AAA+C,IAAA,OAAO,EAAEtB,YAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnCC,EAwCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAI,IAAA,KAAK,EAAE;AAAEkB,MAAAA,UAAU,EAAE;AAAd,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADH,EAEG;AAAI,IAAA,KAAK,EAAE;AAAEA,MAAAA,UAAU,EAAE;AAAd,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFH,EAGA;AACG,IAAA,IAAI,EAAC,MADR;AAEG,IAAA,WAAW,EAAC,eAFf;AAGG,IAAA,QAAQ,EAAGC,CAAD,IAAOxD,UAAU,CAACwD,CAAC,CAACC,MAAF,CAASC,KAAV,CAH9B;AAIG,IAAA,KAAK,EAAE3D,OAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,CAxCC,EAkDD;AAAQ,IAAA,EAAE,EAAC,SAAX;AAAqB,IAAA,KAAK,EAAE;AAAE4D,MAAAA,KAAK,EAAE;AAAT,KAA5B;AAA+C,IAAA,OAAO,EAAExB,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAlDC,EAqDD;AAAQ,IAAA,EAAE,EAAC,SAAX;AAAqB,IAAA,KAAK,EAAE;AAAEwB,MAAAA,KAAK,EAAE;AAAT,KAA5B;AAA+C,IAAA,OAAO,EAAEvB,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eArDC,EAwDC;AAAG,IAAA,EAAE,EAAC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBzD,MAAhB,CAxDD,CADF;AA8DD,CAlVH;;AAsVA,eAAeL,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport CarSharingContract from \"./contracts/CarSharing.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nconst App = () => {\n  \n  const [message, setMessage] = useState(\"\"); //default message\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [regStatus, setRegStatus] = useState(\"\");\n  const [registrationStatus, setRegistrationStatus] = useState(\"User Registered 🔴\");\n  const [rentStatus, setRentStatus] = useState(\"Car Reserved 🔴\");\n  const [userRegistered, setUserRegistered] = useState(\"0\");\n  const [userRented, setUserRented] = useState(\"0\");\n  const [contract, setContract] = useState(\"\");\n  const [content, setContent] = useState(\"test\");\n  const [userName, setUserName] = useState(\"\");\n  const [license, setLicense] = useState(\"\");\n  const [plateNo, setPlateNo] = useState(\"\");\n  //state = { message: null, userName: null, userId: null, rentStatus: null, web3: null, accounts: null, contract: null };\n\n  useEffect(async () => {\n    await whenWalletConnected();\n    // const message = \"hello\";\n    // setMessage(message);\n    \n  }, []);\n\n  const whenWalletConnected = async () => {\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        CarSharingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      setContract(instance);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      //this.setState({ web3, accounts, contract: instance }, this.startApp);\n\n      instance.events.UserRegistered({}, (error, data) => {\n        if (error) {\n          setMessage(error.message);\n        } else{\n          setRegistrationStatus(\"User Registered 🟢\");\n          setUserRegistered(\"1\");\n        }\n      });\n\n      instance.events.CarReserved({}, (error, data) => {\n        if (error) {\n          setMessage(error.message);\n        } else{\n          setRentStatus(\"Car Reserved 🟢\");\n          setUserRented(\"1\");\n        }\n      });\n\n      instance.events.CarReleased({}, (error, data) => {\n        if (error) {\n          setMessage(error.message);\n        } else{\n          setRentStatus(\"Car Reserved 🔴\");\n        }\n      });\n  };\n\n  const componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      // const networkId = await web3.eth.net.getId();\n      // const deployedNetwork = SimpleStorageContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   SimpleStorageContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = CarSharingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        CarSharingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      //this.setState({ web3, accounts, contract: instance }, this.startApp);\n\n      instance.events.UserRegistered({}, (error, data) => {\n        if (error) {\n          alert(error.message);\n        } else{\n          this.setState({ registrationStatus: \"You are registered\"});\n        }\n        \n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  const runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n const rentCar = async () => {\n await contract.methods.rentCar(10, plateNo).send({ from: walletAddress });\n};\n\nconst unrentCar = async () => {\n  await contract.methods.unrentCar(plateNo).send({ from: walletAddress });\n };\n\nconst registerUser = async () => {\n  if(userRegistered == \"0\"){\n    await contract.methods.registerDriver(userName, license).send({ from: walletAddress });\n  }else{\n    setRegStatus(\"You are already registered!\");\n  }\n  \n};\n\nconst getUserStatus = async (address) => {\n  let response = await contract.methods.getRegistrationStatus(address).call();\n  if(response){\n    setRegistrationStatus(\"User Registered 🟢\");\n    setUserRegistered(\"1\");\n  }else{\n    setRegistrationStatus(\"User Registered 🔴\");\n    setContent('<div>' \n     + '<h3 style={{ paddingTop: \"18px\" }}>User Registration</h3>'\n     + ' <h3 style={{ paddingTop: \"18px\" }}>Name:</h3>'\n     + '   <input'\n     + '     type=\"text\"'\n     + '     placeholder=\"e.g. John Wick\"'\n     + '   />'\n     + '  <h3 style={{ paddingTop: \"18px\" }}>License:</h3>'\n     + '   <input'\n     + '     type=\"text\"'\n     + '     placeholder=\"e.g. ID12345\"'\n     + '   />'\n       \n     + ' </div> '\n     + ' <button id=\"publish\" style={{ float: \"right\"}}>'\n     + '     Register'\n     + '   </button>');\n  }\n\n  response = await contract.methods.getRentStatus(address).call();\n  if(response){\n    setRentStatus(\"Car Reserved 🟢\");\n  }else{\n    setRentStatus(\"Car Reserved ❌\");\n  }\n};\n\n\n// getCurrentWalletConnected = async () => {\n//   if (window.ethereum) {\n//     try {\n//       const addressArray = await window.ethereum.request({\n//         method: \"eth_accounts\",\n//       });\n//       if (addressArray.length > 0) {\n//         return {\n//           address: addressArray[0],\n//           status: \"👆🏽 Write a message in the text-field above.\",\n//         };\n//       } else {\n//         return {\n//           address: \"\",\n//           status: \"🦊 Connect to Metamask using the top right button.\",\n//         };\n//       }\n//     } catch (err) {\n//       return {\n//         address: \"\",\n//         status: \"😥 \" + err.message,\n//       };\n//     }\n//   } else {\n//     return {\n//       address: \"\",\n//       status: (\n//         <span>\n//           <p>\n//             {\" \"}\n//             🦊{\" \"}\n//             <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n//               You must install Metamask, a virtual Ethereum wallet, in your\n//               browser.\n//             </a>\n//           </p>\n//         </span>\n//       ),\n//     };\n//   }\n// };\n\nconst connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Enter any Teslo car plate no. above to reserve!\",\n        regStatus: \"👆🏽 Register first to start car sharing!\",\n        address: addressArray[0],\n      };\n      setStatus(obj.status);\n      setRegStatus(obj.regStatus)\n      setWallet(obj.address);\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n  \n};  \n\n// const inputChanged = (e) => {\n//   this.setState({ inputVal: e.target.value });\n// }\n  \nconst connectWalletPressed = async () => {\n await connectWallet().then((response) => {\n  getUserStatus(response.address);\n}, (error) => {\n  /**\n   * Handle error here\n   */\n});;\n};\n\n    // if (!this.state.web3) {\n    //   return <div>Loading Web3, accounts, and contract...</div>;\n    // }\n    return (\n      <div id=\"container\">\n      {/* <img id=\"logo\" src={alchemylogo}></img> */}\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h1 style={{ paddingTop: \"50px\" }}>Teslo Car Sharing Service</h1>\n        <p id=\"registrationStatus\">{registrationStatus}</p>\n        <p id=\"rentStatus\">{rentStatus}</p>\n        <p>{message}</p>\n      <div> \n        <h3 style={{ paddingTop: \"18px\" }}>User Registration</h3>\n        <h3 style={{ paddingTop: \"18px\" }}>Name:</h3>\n     <input\n        type=\"text\"\n        placeholder=\"e.g. John Wick\"\n        onChange={(e) => setUserName(e.target.value)}\n        value={userName}\n     />\n     <h3 style={{ paddingTop: \"18px\" }}>License:</h3>\n      <input\n        type=\"text\"\n        placeholder=\"e.g. ID12345\"\n        onChange={(e) => setLicense(e.target.value)}\n        value={license}\n      />\n       <p id=\"status\">{regStatus}</p>\n     </div> \n     <button id=\"publish\" style={{ float: \"right\"}} onClick={registerUser}>\n        Register\n     </button>\n\n\n     <div> \n        <h3 style={{ paddingTop: \"18px\" }}>Car Reservation</h3>\n        <h3 style={{ paddingTop: \"18px\" }}>Plate No.:</h3>\n     <input\n        type=\"text\"\n        placeholder=\"e.g. SJW1011E\"\n        onChange={(e) => setPlateNo(e.target.value)}\n        value={plateNo}\n     />\n     </div> \n     <button id=\"publish\" style={{ float: \"right\"}} onClick={rentCar}>\n        Reserve\n     </button>\n     <button id=\"publish\" style={{ float: \"right\"}} onClick={unrentCar}>\n        Release\n     </button>\n       <p id=\"status\">{status}</p>\n       \n       \n    </div>\n    );\n  };\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}